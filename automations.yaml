################################################
#
#      Harmony Automations
#
################################################

- alias: Close Bedroom Curtains At Sunset
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: state
    entity_id: cover.bedroom_curtains
    state: 'open'
  action:
  - service: cover.close_cover
    entity_id: cover.bedroom_curtains
    
- alias: Close Bay Window Curtains At Sunset
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: state
    entity_id: cover.bay_window_curtains
    state: 'open'
  action:
  - service: cover.close_cover
    entity_id: cover.bay_window_curtains

- alias: Outside Speakers CC
  trigger:
  - platform: state
    entity_id: media_player.outdoor_speakers
    to: 'playing'
  - platform: state
    entity_id: media_player.outdoor_speakers
    to: 'idle'
  condition:
    condition: state
    entity_id: media_player.onkyo_den_zone_2
    state: 'off'
  action:
  - service: script.turn_on
    entity_id: script.zone_2_cc

- alias: Outside Speakers CC off
  trigger:
    platform: state
    entity_id: media_player.outdoor_speakers
    to: 'off'
  condition:
    condition: state
    entity_id: media_player.onkyo_den_zone_2
    state: 'on'
  action:
  - service: script.turn_on
    entity_id: script.zone_2_off

- alias: Set Den Harmony Off
  trigger:
    platform: state
    entity_id: remote.harmony_hub_den
    from: 'on'
    to: 'off'
  condition:
    condition: template
    value_template: '{{ trigger.to_state.attributes.current_activity == "PowerOff" }}'
  action:
  - service: light.turn_off
    entity_id: light.tv_lights
  - condition: state
    entity_id: switch.fireplace
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.fireplace

- alias: Set Bedroom Booleans Off
  trigger:
    platform: state
    entity_id: remote.harmony_hub_bedroom
    from: 'on'
    to: 'off'
  condition:
    condition: template
    value_template: '{{ trigger.to_state.attributes.current_activity == "PowerOff" }}'
  action:
  - service: light.turn_off
    entity_id: light.biased_lights
     
- alias: Fireplace and TV Lights Between Sunset and Sunrise
  trigger:
  - platform: state
    entity_id: remote.harmony_hub_den
    from: 'off'
    to: 'on'
  - platform: sun
    event: sunset
    offset: "00:01:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: template
      value_template: "{{ states.remote.harmony_hub_den.attributes.current_activity != 'PowerOff' }}"
  action:
  - service: light.turn_on
    entity_id: light.tv_lights
    data:
      brightness_pct: 100
      kelvin: 6500
  - condition: state
    entity_id: switch.fireplace
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.fireplace

- alias: Turn on Fireplace and TV Lights Night
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: template
    value_template: "{{ states.remote.harmony_hub_den.attributes.current_activity != 'PowerOff' }}"
  action:
  - service: light.turn_on
    entity_id: light.tv_lights
    data:
      brightness_pct: 100
      kelvin: 6500
  - condition: state
    entity_id: switch.fireplace
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.fireplace

- alias: Turn on bias lighting bedroom at night
  trigger:
  - platform: state
    entity_id: remote.harmony_hub_bedroom
    from: 'off'
    to: 'on'
  - platform: sun
    event: sunset
    offset: "00:01:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: template
      value_template: '{{ states.remote.harmony_hub_bedroom.attributes.current_activity != "PowerOff" }}'
  action:
  - service: light.turn_on
    entity_id: light.biased_lights
    data:
      brightness_pct: 100
      kelvin: 6500

- alias: Turn on bias Lights Night
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: template
    value_template: "{{ states.remote.harmony_hub_bedroom.attributes.current_activity != 'PowerOff' }}"
  action:
  - service: light.turn_on
    entity_id: light.biased_lights
    data:
      brightness_pct: 100
      kelvin: 6500

- alias: Turn on living room bias lighting bedroom at night
  trigger:
  - platform: state
    entity_id: switch.living_room_tv
    from: 'off'
    to: 'on'
  - platform: sun
    event: sunset
    offset: "00:01:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: switch.living_room_tv
      state: 'on'
  action:
  - service: light.turn_on
    entity_id: light.cabinet_lights
    data:
      brightness_pct: 100
      kelvin: 6500

- alias: Turn off living room bias lights with TV
  trigger:
  - platform: state
    entity_id: switch.living_room_tv
    from: 'on'
    to: 'off'
  action:
  - service: light.turn_off
    entity_id: light.cabinet_lights

- alias: Harmony Den activity start
  trigger:
    platform: state
    entity_id: input_select.harmony_den
    from: 'Select Input'
  action:
  - service: remote.turn_on
    entity_id: remote.harmony_hub_den
    data_template:
      activity: >
        {% if is_state("input_select.harmony_den", "Netflix") %}
          19168891
        {% elif is_state("input_select.harmony_den", "Watch Roku") %}
          27030102
        {% elif is_state("input_select.harmony_den", "Watch PC") %}
          25516536
        {% elif is_state("input_select.harmony_den", "Watch Smart TV") %}
          19688407
        {% elif is_state("input_select.harmony_den", "Xbox") %}
          22642672
        {% else %}
        {% endif %}
  - service: input_select.select_option
    entity_id: input_select.harmony_den
    data_template:
      option: "Select Input"
      
- alias: Harmony Bed activity start
  trigger:
    platform: state
    entity_id: input_select.harmony_bed
    from: 'Select Input'
  action:
  - service: remote.turn_on
    entity_id: remote.harmony_hub_bedroom
    data_template:
      activity: >
        {% if is_state("input_select.harmony_den", "Bedroom Bluray") %}
          23738920
        {% elif is_state("input_select.harmony_den", "Bedroom Chromecast") %}
          23739184
        {% elif is_state("input_select.harmony_den", "Watch Fire TV") %}
          19492437
        {% else %}
        {% endif %}
  - service: input_select.select_option
    entity_id: input_select.harmony_bed
    data_template:
      option: "Select Input"
      
- alias: Harmony Den power off
  trigger:
    platform: state
    entity_id: input_select.harmony_den
    to: 'Power Off'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_den
  - service: input_select.select_option
    entity_id: input_select.harmony_den
    data_template:
      option: "Select Input"
      
- alias: Harmony Bed power off
  trigger:
    platform: state
    entity_id: input_select.harmony_bed
    to: 'Power Off'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_bedroom
  - service: input_select.select_option
    entity_id: input_select.harmony_bed
    data_template:
      option: "Select Input"
      
- alias: Turn off bias lights and fireplace at sunrise
  trigger:
    platform: sun
    event: sunrise
    offset: "00:30:00"
  action:
  - service: light.turn_off
    entity_id: light.tv_lights
  - service: light.turn_off
    entity_id: light.biased_lights
  - condition: state
    entity_id: input_boolean.fireplace
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.fireplace
    
- alias: Turn off bedroom tv in night mode if movie is done and you fell asleep
  trigger:
  - platform: state
    entity_id: media_player.kodi_bedroom, media_player.bedroom_shield_tv
    to: 'off'
    for:
      minutes: 30
  condition:
    condition: state
    entity_id: input_boolean.night_mode
    state: 'on'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_bedroom
    
- alias: Turn off bedroom tv in night mode when channels have been playing for 3 hours
  trigger:
  - platform: state
    entity_id: media_player.kodi_bedroom
    to: playing
    for:
      hours: 3
  - platform: state
    entity_id: media_player.bedroom_shield_tv
    to: 'paused'
    for:
      hours: 3
  - platform: state
    entity_id: sensor.bedroom_shield_app
    to: TiviMate
    for:
      hours: 3
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: "{{ is_state('media_player.kodi_bedroom', 'playing') or not is_state('media_player.bedroom_shield_tv', 'off') }}"
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_bedroom

- alias: Mark kitchen tv as on when an app is playing
  trigger:
    platform: state
    entity_id: sensor.kitchen_fire_stick_app
    from: 'com.amazon.tv.launcher'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: switch.kitchen_tv
      state: 'off'
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.kitchen_fire_stick_app
        state:
        - 'unavailable'
        - 'unknown'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.kitchen_tv

################################################
#
#      Laundry notifications
#   
################################################

- alias: Dryer Notification
  trigger:
    platform: state
    entity_id: sensor.dryer_running
    to: 'False'
    for:
      minutes: 3
  condition:
    condition: state
    entity_id: input_boolean.dryer_status
    state: 'on'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.dryer_status
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "The dryer is done 🎉.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running 🙈 {% else %} Time to get your clothes 👍 {% endif %}"
      title: Shokabow Zoo
  - service: notify.android
    data_template:
      message: "The dryer is done 🎉.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running 🙈 {% else %} Time to get your clothes 👍 {% endif %}"
      title: Laundry
      data:
        ttl: 0
        priority: high
        channel: Laundry
        group: laundry
        notification_icon: "mdi:washing-machine"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: notify.google_assistant_sdk
    data:
      message: "The dryer is done {% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running {% else %} Time to get your clothes {% endif %}"

- alias: Washer Notification
  trigger:
    platform: state
    entity_id: sensor.washer_running
    to: 'False'
    for:
      minutes: 3
  condition:
    condition: state
    entity_id: input_boolean.washer_status
    state: 'on'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.washer_status
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "The washer is done 🎉.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running 🙈 {% else %} Time to switch laundry 👍 {% endif %}"
      title: Shokabow Zoo
  - service: notify.android
    data_template:
      message: "The washer is done 🎉.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running 🙈 {% else %} Time to switch laundry 👍 {% endif %}"
      title: Laundry
      data:
        ttl: 0
        priority: high
        channel: Laundry
        group: laundry
        notification_icon: "mdi:washing-machine"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: notify.google_assistant_sdk
    data:
      message: "The washer is done {% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running {% else %} Time to switch laundry {% endif %}"

- alias: Dishwasher Notification
  trigger:
    platform: state
    entity_id: sensor.dishwasher_running
    to: 'False'
    for:
      minutes: 5
  condition:
    condition: state
    entity_id: input_boolean.dishwasher_status
    state: 'on'
  action:
  - service: notify.den
    data:
      data:
        color: red
        duration: 10
        position: center
      message: "The dishes are done! 🎉"
      title: Shokabow Zoo
  - service: input_boolean.turn_off
    entity_id: input_boolean.dishwasher_status
  - service: notify.android
    data_template:
      message: "The dishes are done! 🎉"
      data:
        ttl: 0
        priority: high
        channel: Dishwasher
        tag: dishes
        group: dishes
        notification_icon: "mdi:washing-machine"
  - service: input_boolean.turn_on
    entity_id: input_boolean.dishes_clean
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: notify.google_assistant_sdk
    data:
      message: "The dishes are done"

- alias: Washer Start
  trigger:
    platform: state
    entity_id: sensor.washer_running
    to: 'True'
    for:
      minutes: 3
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.washer_status

- alias: Dryer Start
  trigger:
    platform: state
    entity_id: sensor.dryer_running
    to: 'True'
    for:
      minutes: 10
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.dryer_status

- alias: Dishwasher Start
  trigger:
    platform: state
    entity_id: sensor.dishwasher_running
    to: 'True'
  action:
  - service: input_boolean.turn_on
    entity_id: input_boolean.dishwasher_status
  - service: input_boolean.turn_off
    entity_id: input_boolean.dishes_clean  

################################################
#
#      TTS notifications
#
################################################

- alias: Front Door TTS
  mode: queued
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'off'
  condition:
    condition: template
    value_template: "{{ trigger.from_state.state != 'unavailable' }}"
  action:
  - service: tts.google_say
    entity_id: media_player.living_room_home
    data_template:
      message: >
        {% if is_state("binary_sensor.front_door", "on") %}
          The front door is open
        {% elif is_state("binary_sensor.front_door", "off") %}
          The front door is closed
        {% else %}
        {% endif %}

- alias: Announce Lock Jammed
  trigger:
    platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '11'
  action:
  - service: notify.android
    data_template:
      message: "The front door lock is jammed 🚪🔒⛔."
      data:
        ttl: 0
        priority: high
        channel: Lock
        group: lock
        notification_icon: "mdi:lock-alert"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: notify.google_assistant_sdk
    data:
      message: "The front door lock is jammed"

- alias: Notify Catio Door Left Open
  trigger:
    platform: state
    entity_id: binary_sensor.catio_firepit_door, binary_sensor.catio_pool_door
    to: 'on'
    for:
      seconds: 30
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.gardener
      state: 'off'
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has been left open for 30 seconds 🚪🙀"
      title: Door Open
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:door-open"
  - service: tts.google_say
    entity_id: media_player.den_home_hub
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has been left open, please close it"

- alias: Printer paused
  trigger:
    platform: state
    entity_id: sensor.octoprint_current_state
    to: 'Paused'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.shower_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'off'
  action:
  - service: tts.google_say
    entity_id: media_player.den_home_hub, media_player.kitchen_display
    data_template:
      message: "Printing paused."

- alias: TTS close den sliding door
  trigger:
  - platform: state
    entity_id: binary_sensor.den_sliding_door
    to: 'on'
    for:
      minutes: 5
  - platform: state
    entity_id: climate.thermostat
    to: 'cool'
  - platform: state
    entity_id: climate.thermostat
    to: 'heat'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.den_sliding_door
      state: 'on'
    - condition: or
      conditions:
      - condition: state
        entity_id: climate.thermostat
        state: 'cool'
      - condition: state
        entity_id: climate.thermostat
        state: 'heat'
  action:
  - service: tts.google_say
    entity_id: media_player.den_home_hub
    data_template:
      message: "Please close the den sliding door, the thermostat is set to {{ states('climate.thermostat') }}."
  - service: notify.android
    data_template:
      message: "Please close the den sliding 🚪, the thermostat is set to {{ states('climate.thermostat') }}."
      title: Door Open
      data:
        ttl: 0
        priority: high
        group: door
        tag: door
        notification_icon: "mdi:door-open"
  - wait_for_trigger:
    - platform: state
      entity_id: binary_sensor.den_sliding_door
      to: 'off'
    - platform: state
      entity_id: climate.thermostat
      to: 'off'
  - service: notify.android
    data:
      message: clear_notification
      data:
        tag: door

################################################
#
#      Alarm automations and notifications
#
################################################

- alias: Front Door And Living Room Alarm Pic
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.living_room_camera
      filename: '/home/homeassistant/.homeassistant/www/living_room_camera.jpg'
  - service: notify.plex_shokouhi
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} triggered snapshot 📸 "
      data:
        file:
          path: "/home/homeassistant/.homeassistant/www/living_room_camera.jpg"
  - service: notify.hass
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} triggered snapshot 📸 "
      target:
      - !secret discord_alarm
      data:
        images:
        - "/home/homeassistant/.homeassistant/www/living_room_camera.jpg"
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} triggered snapshot"
      title: "Alarm"
      data:
        image: "/local/living_room_camera.jpg"
        group: alarm
        channel: alarm
        sticky: true
        importance: high
        notification_icon: "mdi:shield-home"
  - service: switch.turn_on
    entity_id: switch.living_room_state
  - delay: "00:00:30"
  - service: switch.turn_off
    entity_id: switch.living_room_state

- alias: Den Alarm Pic
  trigger:
  - platform: state
    entity_id: binary_sensor.den_sliding_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.den_camera
      filename: '/home/homeassistant/.homeassistant/www/den_camera.jpg'
  - service: notify.plex_shokouhi
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} triggered snapshot 📸"
      data:
        file:
          path: "/home/homeassistant/.homeassistant/www/den_camera.jpg"
  - service: notify.hass
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} triggered snapshot. 📸 "
      target:
      - !secret discord_alarm
      data:
        images:
        - "/home/homeassistant/.homeassistant/www/den_camera.jpg"
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} triggered snapshot"
      title: "Alarm"
      data:
        image: "/local/den_camera.jpg"
        group: alarm
        channel: alarm
        sticky: true
        importance: high
        notification_icon: "mdi:shield-home"
  - service: switch.turn_on
    entity_id: switch.den_state
  - delay: "00:00:30"
  - service: switch.turn_off
    entity_id: switch.den_state

- alias: Kitchen Alarm Pic
  trigger:
    platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.kitchen
      filename: '/home/homeassistant/.homeassistant/www/kitchen.jpg'
  - service: notify.plex_shokouhi
    data:
      message: "Kitchen camera triggered snapshot 📸 "
      data:
        file:
          path: "/home/homeassistant/.homeassistant/www/kitchen.jpg"
  - service: notify.hass
    data_template:
      message: "Kitchen camera triggered snapshot 📸"
      target:
      - !secret discord_alarm
      data:
        images:
        - "/home/homeassistant/.homeassistant/www/kitchen.jpg"
  - service: notify.android
    data:
      message: "Kitchen camera triggered snapshot"
      title: "Alarm"
      data:
        image_file: "/local/kitchen.jpg"
        group: alarm
        channel: alarm
        sticky: true
        importance: high
        notification_icon: "mdi:shield-home"
  - service: switch.turn_on
    entity_id: switch.kitchen_state
  - delay: "00:00:30"
  - service: switch.turn_off
    entity_id: switch.kitchen_state

- alias: Alarm Tripped
  trigger:
  - platform: state
    entity_id: binary_sensor.den_sliding_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.ollies_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_frontyard_door
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - delay: "00:00:02"
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.home
  - service: notify.plex_shokouhi
    data_template:
      message: "The alarm has been tripped ⚠ from the following windows/doors (may be false alarm, wait for triggered notification in 1 minute): {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.hass
    data_template:
      message: "The alarm has been tripped ⚠ from the following windows/doors (may be false alarm, wait for triggered notification in 1 minute): {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: TTS
      data:
        tts_text: "Warning the alarm was just tripped at the following windows/doors: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"

- alias: Goodbye on Alarm
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  action:
  - service: scene.turn_on
    entity_id: scene.goodbye
  - service: lock.lock
    entity_id: lock.front_door
  - service: notify.plex_shokouhi
    data:
      message: "The alarm has been activated."
  - service: notify.hass
    data_template:
      message: "The alarm has been activated."
      target:
      - !secret discord_alarm
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: TTS
      data:
        ttl: 0
        priority: 'high'
        tts_text: "The alarm has been activated."
  # - delay: "00:00:05"
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic

- alias: Notify Alarm Off
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    from: armed_away
    to: disarmed
  action:
  - service: notify.plex_shokouhi
    data:
      message: "The alarm has been deactivated."
  - service: notify.hass
    data_template:
      message: "The alarm has been deactivated."
      target:
      - !secret discord_alarm

- alias: Arm Alarm When Nobody Home
  trigger:
  - entity_id: group.tracked_users
    platform: state
    to: not_home
    for:
      minutes: 3
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'off'
  action:
  - service: alarm_control_panel.alarm_arm_away
    data:
      entity_id: alarm_control_panel.home
  - service: notify.plex_shokouhi
    data:
      message: "The alarm has been activated since nobody is home"
  - service: notify.hass
    data_template:
      message: "The alarm has been activated since nobody is home"
      target:
      - !secret discord_alarm
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: TTS
      data:
        ttl: 0
        priority: 'high'
        tts_text: "The alarm has been activated since nobody is home"

- alias: Disarm alarm when someone comes home
  trigger:
  - platform: state
    entity_id: group.tracked_users
    to: 'home'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  action:
  - service: alarm_control_panel.alarm_disarm
    data:
      entity_id: alarm_control_panel.home
  - service: notify.plex_shokouhi
    data:
      message: "The alarm has been deactivated since a tracked user is home"
  - service: notify.hass
    data_template:
      message: "The alarm has been deactivated since a tracked user is home"
      target:
      - !secret discord_alarm

- alias: Arm Alarm Front Door
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 5
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '5'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  action:
  - service: alarm_control_panel.alarm_arm_away
    data:
      entity_id: alarm_control_panel.home

- alias: Disarm Alarm Front Door
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 6
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '6'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_away'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'arming'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'pending'
  action:
  - service: alarm_control_panel.alarm_disarm
    data:
      entity_id: alarm_control_panel.home

- alias: Turn on lights if alarm is disarmed
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 6
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'arming'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'pending'
  action:
  - service: light.turn_on
    entity_id: light.living_room_lights_level
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - condition: template
    value_template: "{{ states.media_player.kodi_den.state != 'playing' and states.media_player.kodi_shield.state != 'playing' }}"
  - service: light.turn_on
    entity_id: light.den_lights_level
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic

- alias: Dad Unlock
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 6
      parameters:
        userId: 2
  action:
  - service: notify.plex_shokouhi
    data:
      message: "The front door has been unlocked by dad"
  - service: notify.hass
    data_template:
      message: "The front door has been unlocked by dad"
      target:
      - !secret discord_alarm
  - service: tts.google_say
    entity_id: media_player.kitchen_display, media_player.den_home_hub, media_player.ollies_speaker
    data:
      message: 'Hello just a friendly reminder to make sure the water bowls in the den and living room are refilled. Thank you so much have a great day.'

- alias: Zoo keeper Unlock
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 6
      parameters:
        userId: 3
  action:
  - service: notify.plex_shokouhi
    data:
      message: "The front door has been unlocked by zoo keeper"
  - service: notify.hass
    data_template:
      message: "The front door has been unlocked by zoo keeper"
      target:
      - !secret discord_alarm

- alias: Izzy Unlock
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 6
      parameters:
        userId: 4
  action:
  - service: notify.plex_shokouhi
    data:
      message: "The front door has been unlocked by Izzy"
  - service: notify.hass
    data_template:
      message: "The front door has been unlocked by Izzy"
      target:
      - !secret discord_alarm

- alias: Warn Alarm On But Window Open
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  condition:
    condition: state
    entity_id: binary_sensor.windows
    state: 'on'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "The following window(s) is/are open but the alarm is turned on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.android
    data_template:
      message: "The following window(s) is/are open but the alarm is turned on ⛔ : {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      title: Window Open
      data:
        ttl: 0
        priority: high
        channel: alarm
        group: alarm
        notification_icon: "mdi:window-open"
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: TTS
      data:
        ttl: 0
        priority: 'high'
        tts_text: "The following windows are open but the alarm is on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"

- alias: Notify door lock keypad locked
  trigger:
  - platform: event
    event_type: "zwave_js_notification"
    event_data:
      event: 16
  action:
  - service: notify.plex_shokouhi
    data:
      message: "Too many incorrect codes used on front door. Keypad locked. 🔐 "
  - service: notify.android
    data_template:
      message: "Too many incorrect codes used on front door. Keypad locked. 🔐 "
      title: Keypad Locked
      data:
        ttl: 0
        priority: high
        channel: alarm
        group: alarm
        notification_icon: "mdi:lock-remove"

- alias: Notify alarm triggered
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    to: 'triggered'
  action:
  - service: light.turn_on
    entity_id: light.den_lights_level, light.kitchen_lights_level, light.living_room_lights_level, light.bedroom_lights_level, light.ollies_lights_level
  - service: notify.plex_shokouhi
    data_template:
      message: "The alarm has been triggered since it was not disarmed for 60 seconds 👮‍♀ , check Slack for snapshots!! Following windows/doors triggered the alarm: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.hass
    data_template:
      message: "The alarm has been triggered since it was not disarmed for 60 seconds 👮‍♀‍ , check Slack for snapshots!! Following windows/doors triggered the alarm: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: TTS
      data:
        ttl: 0
        priority: 'high'
        tts_text: "Attention the alarm has been triggered by: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: switch.turn_on
    entity_id: switch.siren_switch
  - service: script.turn_on
    entity_id: script.den_camera_snapshot
  - service: script.turn_on
    entity_id: script.living_room_camera_snapshot
  - service: script.turn_on
    entity_id: script.kitchen_camera_snapshot
  - service: script.turn_on
    entity_id: script.outdoor_camera_snapshot
  - service: script.turn_on
    entity_id: script.den_alarm, script.lr_alarm, script.kitchen_alarm
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - service: light.turn_on
    entity_id: light.patio
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic

- alias: Turn off armed night when we wake up
  trigger:
  - platform: state
    entity_id: input_boolean.danny_sleep, input_boolean.tosh_sleep
    to: 'off'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_night'
  action:
  - service: alarm_control_panel.alarm_disarm
    entity_id: alarm_control_panel.home
  - service: input_boolean.turn_off
    entity_id: input_boolean.night_mode

- alias: Turn on alarm night in night mode
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  action:
  - service: alarm_control_panel.alarm_arm_night
    entity_id: alarm_control_panel.home
    
- alias: Alarm Tripped in armed night
  trigger:
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.ollies_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_frontyard_door
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_night'
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'off'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "Alarm is in armed night and the following windows are open ⛔ : {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.hass
    data_template:
      message: "Alarm is in armed night and the following windows are open ⛔ : {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: tts.google_say
    entity_id: media_player.bedroom_display
    data_template:
      message: "Alarm is in armed night and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.ollies_window', 'on') %} Ollies Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"

- alias: Windows open while going to bed
  trigger:
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "The alarm is arming in night mode and the following windows are open ⛔ : {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.hass
    data_template:
      message: "The alarm is arming in night mode and the following windows are open ⛔ : {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: tts.google_say
    entity_id: media_player.bedroom_display
    data_template:
      message: "The alarm is arming in night mode and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.ollies_window', 'on') %} Ollies Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"

- alias: Set alarm status drop down
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'disarmed'
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_night'
  action:
  - service: input_select.select_option
    entity_id: input_select.alarm_status
    data_template:
      option: >
        {% if is_state("alarm_control_panel.home", "disarmed") %}
          Disarmed
        {% elif is_state("alarm_control_panel.home", "armed_away") %}
          Armed Away
        {% elif is_state("alarm_control_panel.home", "armed_night") %}
          Armed Night
        {% else %}
        {% endif %}

- alias: Notify alarm recording started
  trigger:
    platform: state
    entity_id: switch.den_state, switch.baby_monitor_state, switch.living_room_state, switch.frontyard_driveway_state, switch.frontyard_side_gate_state, switch.garage_side_gate_state, switch.garage_state, switch.kitchen_side_gate_state, switch.kitchen_state, switch.patio_state
    to: 'on'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "Alarm recording 📹 started in {{ trigger.to_state.attributes.friendly_name | replace(' State', '') }}"
  - service: notify.hass
    data_template:
      message: "Alarm recording 📹 started in {{ trigger.to_state.attributes.friendly_name | replace(' State', '') }}"
      target:
      - !secret discord_alarm


################################################
#
#      Dog Lights
#
################################################

- alias: Dog Lights On
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  - platform: sun
    event: sunset
    offset: "00:01:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_away'
  action:
  - service: light.turn_on
    entity_id: light.front_door_lamp
  - service: light.turn_on
    entity_id: light.corner_lamp
    data:
      kelvin: 2703
      brightness_pct: 100

- alias: Dog Lights Off
  trigger:
  - platform: sun
    event: sunrise
  - platform: state
    entity_id: alarm_control_panel.home
    from: 'armed_away'
    to: 'disarmed'
  action:
  - service: light.turn_off
    entity_id: light.corner_lamp, light.front_door_lamp

################################################
#
#      Morning Automations
#
################################################

- alias: Boogie Morning Rule
  trigger:
  - platform: time
    at: "07:15:00"
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: light.turn_on
    entity_id: light.bedroom_lights_level
  - service: cover.open_cover
    entity_id: cover.bedroom_curtains
  - wait_template: "{{ states.binary_sensor.natachas_bayesian_presence.state == 'off' }}"
  - service: light.turn_off
    entity_id: light.bedroom_lights_level
  - service: switch.turn_off
    entity_id: switch.bedroom_fan
  - condition: state
    entity_id: binary_sensor.bedroom_door
    state: 'on'
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "Bedroom door 🚪 left open and boogie has left 🚙 for work, go close it!"
      title: Shokabow Zoo
  - service: notify.hass
    data_template:
      message: "Bedroom door 🚪 left open and boogie has left 🚙 for work, go close it!"
      target:
      - !secret discord_danny
  - service: tts.google_say
    entity_id: media_player.den_home_hub
    data:
      message: "Bedroom door left open and boogie has left for work, go close it!"

- alias: Boogie Take Your Meds
  trigger:
  - platform: time
    at: "08:00:00"
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: tts.google_say
    entity_id: media_player.kitchen_display
    data:
      message: "Don't forget to take your meds"

- alias: Good Morning
  trigger:
  - platform: sun
    event: sunrise
    offset: "00:30:00"
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_night'
  action:
  - service: switch.turn_off
    entity_id: switch.house_fan
  - service: light.turn_off
    entity_id: light.bathroom_night_light, light.toshs
  - service: homeassistant.update_entity
    entity_id: sensor.ssl_certificate_expiry
  - service: homeassistant.update_entity
    entity_id: sensor.uptime_days
  - wait_template: "{{ is_state('input_boolean.guest_sleeping', 'off') }}"
  - service: cover.open_cover
    entity_id: cover.bay_window_curtains

- alias: Hallway light above horizon
  trigger:
  - platform: state
    entity_id: light.hallway_light
    to: 'on'
  condition:
    condition: state
    entity_id: sun.sun
    state: 'above_horizon'
  action:
  - service: light.turn_on
    entity_id: light.hallway_light
    data:
      kelvin: 6500
      brightness_pct: 100

- alias: Bedroom curtains on weekends
  trigger:
  - platform: time
    at: "10:30:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: cover.bedroom_curtains
      state: 'closed'
    - condition: time
      weekday:
      - sat
      - sun
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: cover.open_cover
    entity_id: cover.bedroom_curtains

- alias: Heat up house in morning on work days
  trigger:
  - platform: time
    at: "07:15:00"
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    - condition: numeric_state
      entity_id: sensor.thermostat_air_temperature
      below: 66
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'heat'
  - delay: "00:00:05"
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 70
  - wait_template: "{{ state_attr('climate.thermostat', 'temperature') | int == states('sensor.thermostat_air_temperature') | int }}"
  - delay: "00:01:00"
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'off'

- alias: Den lights on between 4 and 8am
  trigger:
    platform: state
    entity_id: light.den_lights_level
    to: 'on'
  condition:
    condition: time
    after: "04:00:00"
    before: "08:00:00"
  action:
    service: light.turn_on
    entity_id: light.den_lights_level
    data:
      brightness_pct: 5
      
- alias: Raise den lights at 9am if below 30
  trigger:
    platform: time
    at: "09:00:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: light.den_lights_level
      state: 'on'
    - condition: template
      value_template: "{{ states.light.den_lights_level.attributes.brightness < 75 }}"
  action:
    service: light.turn_on
    entity_id: light.den_lights_level
    data:
      brightness_pct: 30

- alias: Danny awake
  trigger:
    platform: state
    entity_id: input_boolean.danny_sleep
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
  - service: light.turn_on
    entity_id: light.den_lights_level

- alias: Open bedroom curtains and turn off the fan when we wake up
  trigger:
  - platform: state
    entity_id: input_boolean.danny_sleep
    to: 'off'
  - platform: state
    entity_id: input_boolean.tosh_sleep
    to: 'off'
  - platform: state
    entity_id: sun.sun
    to: 'above_horizon'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.danny_sleep
      state: 'off'
    - condition: state
      entity_id: input_boolean.tosh_sleep
      state: 'off'
    - condition: state
      entity_id: sun.sun
      state: 'above_horizon'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
  - service: switch.turn_off
    entity_id: switch.bedroom_fan
  - condition: state
    entity_id: cover.bedroom_curtains
    state: 'closed'
  - service: cover.open_cover
    entity_id: cover.bedroom_curtains

################################################
#
#      Lock Automations
#
################################################

- alias: Timer Start Auto Lock
  trigger:
  - platform: state
    entity_id: lock.front_door
    to: 'unlocked'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'off'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.front_door
      state: 'off'
    - condition: state
      entity_id: lock.front_door
      state: 'unlocked'
  action:
  - service: timer.start
    entity_id: timer.door_lock

- alias: Cancel Timer Door Locked
  trigger:
  - platform: state
    entity_id: lock.front_door
    to: 'locked'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  action:
  - service: timer.cancel
    entity_id: timer.door_lock

- alias: Auto Lock Front Door
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.door_lock
  action:
  - wait_template: "{{ is_state('binary_sensor.front_door', 'off') }}"
  - service: lock.lock
    entity_id: lock.front_door

################################################
#
#      Mailbox notification
#
################################################

- alias: Enable mailbox boolean
  trigger:
  - platform: sun
    event: sunrise
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.mailbox

- alias: Turn off mailbox boolean after it was opened
  trigger:
  - platform: state
    entity_id: binary_sensor.mailbox
    to: 'on'
    from: 'off'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.mailbox

- alias: Notify Mail Once
  trigger:
  - platform: state
    entity_id: input_boolean.mailbox
    to: 'off'
  condition:
    condition: state
    entity_id: binary_sensor.front_door
    state: 'off'
  action:
  - wait_template: "{{ is_state('alarm_control_panel.home', 'disarmed') }}"
  - service: notify.android
    data_template:
      message: "You got mail 📬"
      data:
        ttl: 0
        priority: high
        channel: Mail
        group: mail
        tag: mail
        notification_icon: "mdi:mailbox"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: notify.google_assistant_sdk
    data:
      message: "You got mail"
  - service: notify.den
    data:
      data:
        color: teal
      message: "You got mail! 📬"
      title: Shokabow Zoo

################################################
#
#      Basic Light Automations
#
################################################

- alias: Bedroom closet light
  mode: queued
  trigger:
  - platform: state
    entity_id: binary_sensor.bedroom_closet_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_closet_door
    to: 'off'
  action:
    service_template: >
           {% if is_state("binary_sensor.bedroom_closet_door", "on") %}
             light.turn_on
           {% elif is_state("binary_sensor.bedroom_closet_door", "off") %}
             light.turn_off
           {% else %}
           {% endif %}
    entity_id: light.bedroom_closet

- alias: Turn off bedroom closet if on for 15 min and door closed
  trigger:
  - platform: state
    entity_id: light.bedroom_closet
    to: 'on'
    for:
      minutes: 15
  condition:
    condition: state
    entity_id: binary_sensor.bedroom_closet_door
    state: 'off'
  action:
    service: light.turn_off
    entity_id: light.bedroom_closet

- alias: Turn off Ollies closet if on for 15 min and door closed
  trigger:
  - platform: state
    entity_id: switch.office_closet_switch
    to: 'on'
    for:
      minutes: 15
  condition:
    condition: state
    entity_id: binary_sensor.ollies_closet_door
    state: 'off'
  action:
    service: switch.turn_off
    entity_id: switch.office_closet_switch
    
- alias: Ollies Closet Light
  mode: restart
  trigger:
  - platform: state
    entity_id: binary_sensor.ollies_closet_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.ollies_closet_door
    to: 'off'
  action:
    service_template: >
           {% if is_state("binary_sensor.ollies_closet_door", "on") %}
             switch.turn_on
           {% elif is_state("binary_sensor.ollies_closet_door", "off") %}
             switch.turn_off
           {% else %}
           {% endif %}
    entity_id: switch.office_closet_switch

- alias: Garage lights from frontyard
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_frontyard_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_frontyard_door
    to: 'off'
  action:
    service_template: >
           {% if is_state("binary_sensor.garage_frontyard_door", "on") %}
             switch.turn_on
           {% elif is_state("binary_sensor.garage_frontyard_door", "off") %}
             switch.turn_off
           {% else %}
           {% endif %}
    entity_id: switch.garage_switch

- alias: Turn on garage lights from backyard
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_backyard_door
    to: 'on'
  action:
    service: switch.turn_on
    entity_id: switch.garage_switch

- alias: Turn off garage lights from backyard
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_backyard_door
    to: 'off'
  # condition:
    # condition: state
    # entity_id: binary_sensor.garage_frontyard_door
    # state: 'off'
  action:
  - service: switch.turn_off
    entity_id: switch.garage_switch

- alias: Turn off garage lights if backyard left open for 15 minutes
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_backyard_door
    to: 'on'
    for:
      minutes: 15
  - platform: state
    entity_id: switch.garage_switch
    to: 'on'
    for:
      minutes: 15
  # condition:
    # condition: state
    # entity_id: binary_sensor.garage_frontyard_door
    # state: 'off'
  action:
  - wait_template: "{{ states.binary_sensor.garage_motion_sensor.state == 'off' }}"
  - service: switch.turn_off
    entity_id: switch.garage_switch

- alias: Turn on bathroom lights when door opens
  trigger:
    platform: state
    entity_id: binary_sensor.bathroom_door
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  action:
    service: light.turn_on
    entity_id: light.bathroom_lights

- alias: Turn off bathroom lights when door closes for 15 minutes
  trigger:
  - platform: state
    entity_id: binary_sensor.bathroom_door
    to: 'off'
    for:
      minutes: 15
  - platform: state
    entity_id: input_boolean.shower_mode
    to: 'off'
  - platform: state
    entity_id: binary_sensor.bathroom_motion
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.shower_mode
      state: 'off'
    - condition: state
      entity_id: binary_sensor.bathroom_door
      state: 'off'
  action:
    service: light.turn_off
    entity_id: light.bathroom_lights

- alias: Christmas Lights
  trigger:
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  action:
    service: script.turn_on 
    data_template:
      entity_id: >
       {% if trigger.entity_id == 'input_boolean.night_mode' %}
         script.christmas_off
       {% else %}
         script.christmas_on
       {% endif %}

################################################
#
#      Rain and Windows Open
#
################################################

- alias: Rain and Windows Open
  trigger:
  - platform: state
    entity_id: binary_sensor.shokabow_weather_rain
    to: 'on'
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.ollies_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.sprinklers
      state: 'off'
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
    - condition: state
      entity_id: binary_sensor.shokabow_weather_rain
      state: 'on'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
  action:
  - service: notify.hass
    data_template:
      message: "Its raining 🌧 and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_house
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: notify.google_assistant_sdk
    data:
      message: "Its raining and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"


- alias: Thermostat on and window open
  trigger:
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.ollies_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  - platform: template
    value_template: "{{ states.climate.thermostat.state != 'off' }}"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
    - condition: template
      value_template: "{{ states.climate.thermostat.state != 'off' }}"
    - condition: template
      value_template: "{{ states.climate.thermostat.state != 'unavailable' }}"
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.shower_mode
      state: 'off'
  action:
  - service: notify.android
    data_template:
      message: "The thermostat 🌡 is on and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      title: Window Open
      data:
        ttl: 0
        priority: high
        channel: Thermostat
        tag: window
        group: thermostat
        notification_icon: "mdi:window-open"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: notify.google_assistant_sdk
    data:
      message: "The thermostat is on and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - wait_for_trigger:
    - platform: state
      entity_id: binary_sensor.windows
      to: 'off'
    - platform: state
      entity_id: climate.thermostat
      to: 'off'
  - service: notify.android
    data:
      message: clear_notification
      data:
        tag: window

################################################
#
#      Night time automations
#
################################################   

- alias: Colorful at night
  trigger:
  - platform: numeric_state
    entity_id: sun.sun
    value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    below: -5.0
  - platform: state
    entity_id: alarm_control_panel.home
    from: 'armed_away'
    to: 'disarmed'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
  action:
  - service: scene.turn_on
    entity_id: scene.colorful

- alias: Turn off fan if house is cold
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_air_temperature
    below: 65
  condition:
    condition: state
    entity_id: switch.bedroom_fan
    state: 'on'
  action:
  - service: switch.turn_off
    entity_id: switch.bedroom_fan
  - condition: state
    entity_id: switch.house_fan
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.house_fan

- alias: Turn on sleep tracking on our phones
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  action:
  - service: notify.mobile_app_toshs_pixel_6_pro
    data:
      message: command_broadcast_intent
      data:
        intent_package_name: "com.urbandroid.sleep"
        intent_action: "com.urbandroid.sleep.alarmclock.START_SLEEP_TRACK"
        ttl: 0
        priority: high
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: command_broadcast_intent
      data:
        intent_package_name: "com.urbandroid.sleep"
        intent_action: "com.urbandroid.sleep.alarmclock.START_SLEEP_TRACK"
        ttl: 0
        priority: high
  - service: input_boolean.turn_on
    entity_id: input_boolean.danny_sleep, input_boolean.tosh_sleep

# - alias: Turn off sleep tracking
  # trigger:
  # - platform: state
    # entity_id: binary_sensor.dannys_phone_charging
    # from: 'on'
    # to: 'off'
    # for:
      # minutes: 10
  # - platform: state
    # entity_id: binary_sensor.toshs_phone_charging
    # from: 'on'
    # to: 'off'
    # for:
      # minutes: 10
  # condition:
    # condition: or
    # conditions:
    # - condition: state
      # entity_id: switch.tasker_sleep_danny
      # state: 'on'
    # - condition: state
      # entity_id: switch.tasker_sleep_tosh
      # state: 'on'
  # action:
  # - service: switch.turn_off
    # data_template:
      # entity_id: >-
          # {% if trigger.entity_id == 'binary_sensor.dannys_phone_charging' %}
            # switch.tasker_sleep_danny
          # {% else %}
            # switch.tasker_sleep_tosh
          # {% endif %}
  # - condition: state
    # entity_id: device_tracker.toshs_pixel_3_xl
    # state: 'not_home'
  # - service: automation.trigger
    # entity_id: automation.tosh_awake_and_left

- alias: Turn off thermostat if left on during night mode
  trigger:
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  - platform: state
    entity_id: climate.thermostat
    to: 'cool'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
    - condition: state
      entity_id: climate.thermostat
      state: 'cool'
  action:
  - delay: "00:30:00"
  - wait_template: "{{ states('sensor.thermostat_air_temperature')|int <= state_attr('climate.thermostat', 'temperature')|int }}"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'on'
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'off'

- alias: Cool down house while sleeping
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_air_temperature
    above: 75
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
    - condition: numeric_state
      entity_id: sensor.thermostat_air_temperature
      above: 75
  action:
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'cool'
  - delay: "00:00:05"
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 74

##################################################
#
#      Alarm Off Automations
#
################################################

- alias: Lights On When Alarm Off
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    from: 'armed_away'
    to: 'disarmed'
  action:
  - service: light.turn_on
    entity_id: light.den_lights_level
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - service: light.turn_on
    entity_id: light.living_room_lights_level
  - service: switch.turn_off
    entity_id: switch.siren_switch
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic
  - condition: state
    entity_id: climate.thermostat
    state: cool
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 76

################################################
#
#      Smoke Notifications
#
################################################

- alias: Smoke Detected
  trigger:
  - platform: state
    entity_id: sensor.den_smoke_status
    to: 'Fire'
  - platform: state
    entity_id: sensor.bedroom_smoke_status
    to: 'Fire'
  - platform: state
    entity_id: sensor.ollies_smoke_status
    to: 'Fire'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "Smoke detected at home {{ trigger.to_state.attributes.friendly_name }} 🚒🔥 "
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'Smoke Detected! {{ trigger.to_state.attributes.friendly_name }} 🚒🔥'
      title: Shokabow Zoo
  - service: notify.hass
    data_template:
      message: "Smoke detected at home {{ trigger.to_state.attributes.friendly_name }} 🚒🔥 "
      target:
      - !secret discord_house
  - service: notify.android
    data_template:
      message: "Smoke detected at home {{ trigger.to_state.attributes.friendly_name }}"
      title: "Smoke Alarm ⚠"
      data:
        channel: alert
        group: alert
        sticky: true
        importance: high
        notification_icon: "mdi:smoke-detector-variant-alert"

- alias: CO2 Detected
  trigger:
  - platform: state
    entity_id: sensor.den_smoke_status
    to: 'CO2'
  - platform: state
    entity_id: sensor.bedroom_smoke_status
    to: 'CO2'
  - platform: state
    entity_id: sensor.ollies_smoke_status
    to: 'CO2'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "CO2 detected at home {{ trigger.to_state.attributes.friendly_name }} 🔥 "
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'CO2 Detected! {{ trigger.to_state.attributes.friendly_name }} 🔥'
      title: Shokabow Zoo
  - service: notify.hass
    data_template:
      message: "CO2 detected at home {{ trigger.to_state.attributes.friendly_name }} 🔥 "
      target:
      - !secret discord_house
  - service: notify.android
    data_template:
      message: "CO2 Detected {{ trigger.to_state.attributes.friendly_name }}"
      title: "CO2 Alarm ⚠"
      data:
        channel: alert
        group: alert
        sticky: true
        importance: high
        notification_icon: "mdi:smoke-detector-variant-alert"

################################################
#
#      Cast Automations
#
################################################

- alias: Stop Playing When Input Select Is Off
  trigger:
  - platform: state
    entity_id: input_select.radio_station
    to: "None"
  condition:
    condition: template
    value_template: "{{ not is_state('input_select.cast_devices', 'None') }}"
  action:
  - service: media_player.turn_off
    data_template:
      entity_id: >
              {% if is_state("input_select.cast_devices", "Living Room") %}
                media_player.living_room_home
              {%-elif is_state("input_select.cast_devices", "Whole House") %}
                media_player.house
              {%-elif is_state("input_select.cast_devices", "Outside") %}
                media_player.outside_speakers
              {%-elif is_state("input_select.cast_devices", "Den") %}
                media_player.den_home_hub
              {%-elif is_state("input_select.cast_devices", "Ollies") %}
                media_player.ollies_speaker
              {%-elif is_state("input_select.cast_devices", "Kitchen") %}
                media_player.kitchen_display
              {%-elif is_state("input_select.cast_devices", "Bathroom") %}
                media_player.bathroom_home
              {%-elif is_state("input_select.cast_devices", "Bedroom") %}
                media_player.bedroom_display
              {% else %}
                "None"
              {% endif %}

- alias: Cast Media Based On Input Select
  trigger:
  - platform: state
    entity_id: input_select.radio_station
  condition:
    condition: template
    value_template: "{{ not is_state('input_select.cast_devices', 'None') }}"
  action:
  - service: media_player.play_media
    data_template:
      entity_id: >
            {% if is_state("input_select.cast_devices", "Living Room") %}
              media_player.living_room_home
            {%-elif is_state("input_select.cast_devices", "Whole House") %}
              media_player.house
            {%-elif is_state("input_select.cast_devices", "Outside") %}
              media_player.outdoor_speakers
            {%-elif is_state("input_select.cast_devices", "Den") %}
              media_player.den_home_hub
            {%-elif is_state("input_select.cast_devices", "Ollies") %}
              media_player.ollies_speaker
            {%-elif is_state("input_select.cast_devices", "Kitchen") %}
              media_player.kitchen_display
            {%-elif is_state("input_select.cast_devices", "Bathroom") %}
              media_player.bathroom_home
            {%-elif is_state("input_select.cast_devices", "Bedroom") %}
              media_player.bedroom_display
            {% else %}
              "None"
            {% endif %}
      media_content_id: >
            {% if is_state("input_select.radio_station", "KROQ") %}
              http://15363.live.streamtheworld.com:80/KROQFMDIALUP_SC
            {%-elif is_state("input_select.radio_station", "Jack FM") %}
              http://17793.live.streamtheworld.com:80/KCBSFMDIALUP_SC
            {%-elif is_state("input_select.radio_station", "Nova 100") %}
              http://streaming.novaentertainment.com.au/nova100
            {%-elif is_state("input_select.radio_station", "SmoothFM") %}
              http://streaming.novaentertainment.com.au/smooth915 
            {%-elif is_state("input_select.radio_station", "SBS Chill") %}
              http://shoutcast.sbs.com.au/SBSChill
            {% else %}
              "None"
            {% endif %}
      media_content_type: 'audio/mp4'

################################################
#
#      Zwave/Zha Automations
#
################################################

- alias: Notify zwave device died
  trigger:
    platform: template
    value_template: >
      {%- for state in states.zwave -%}
        {%- if state.state == "dead" -%}
          true
        {%- endif -%}
      {%- endfor -%}
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.friendly_name != 'Notify zwave device died' }}"
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has died 💀 "
      title: Device Died
      data:
        ttl: 0
        priority: high
        channel: alert
        group: dead
        notification_icon: "mdi:skull"

- alias: Notify zha device died
  trigger:
    platform: state
    entity_id:
    - sensor.bathroom_window
    - sensor.bedroom_window
    - sensor.bedroom_closet_door
    - sensor.kitchen_window
    - sensor.living_room_left_bay_window
    - sensor.living_room_right_bay_window
    - sensor.front_door
    - sensor.living_room_side_window
    - sensor.den_window
    - sensor.den_sliding_door
    - sensor.ollies_closet_door
    - sensor.ollies_door
    - sensor.ollies_window
    - sensor.dishwasher
    - sensor.nursery_heater_power
    - sensor.3d_printer
    - sensor.pool_pump
    to: 'unavailable'
    for:
      minutes: 15
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has died 💀 "
      title: Device Died
      data:
        ttl: 0
        priority: high
        channel: alert
        group: dead
        notification_icon: "mdi:skull"

################################################
#
#      Bayesian Automations
#
################################################

- alias: Notify bayesian on
  mode: queued
  trigger:
    platform: state
    entity_id: binary_sensor.dannys_bayesian_presence
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.danny_sleep
    state: 'off'
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: 'Welcome 🏠 do you need help❓'
      title: 'Shokouhi Zoo'
      data:
        actions:
        - action: 'KEY_ONE'
          title: 'Send Help'
        ttl: 0
        priority: 'high'
        group: location
        channel: location
        tag: location
        timeout: 600
        importance: high
        notification_icon: "mdi:home-map-marker"
  - wait_template: "{{ is_state('binary_sensor.front_door', 'on') }}"
  - service: notify.android
    data:
      message: clear_notification
      data:
        ttl: 0
        priority: high
        tag: location

- alias: Notify help needed at cars
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: KEY_ONE
  action:
  - service: notify.google_assistant_sdk
    data:
      message: "Boogie I need help outside"

- alias: action1
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: action1
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: 'action1'
      data:
        ttl: 0
        priority: 'high'
        group: test
        timeout: 30
        notification_icon: "mdi:gesture-tap"

- alias: action2
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: action2
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: 'action2'
      data:
        ttl: 0
        priority: 'high'
        group: test
        timeout: 30
        notification_icon: "mdi:gesture-tap"

- alias: Notify bayesian off
  trigger:
    platform: state
    entity_id: binary_sensor.dannys_bayesian_presence
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.danny_sleep
    state: 'off'
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: TTS
      data:
        ttl: 0
        priority: 'high'
        tts_text: "You are not home, did you forget anything?"
  # - service: notify.hass
    # data_template:
      # message: "You are not home 🏠, did you forget anything?"
      # target:
      # - !secret discord_danny

# - alias: Mobile app location
  # trigger:
    # platform: state
    # entity_id: device_tracker.dannys_pixel_6_pro, device_tracker.toshs_pixel_3_xl
  # condition:
    # condition: template
    # value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
  # action:
  # - service: notify.hass
    # data_template:
      # message: "{{ trigger.to_state.attributes.friendly_name }} mobile app is {{ trigger.to_state.state }}"
      # target:
      # - !secret discord_danny

- alias: Notify bayesian on tosh
  trigger:
    platform: state
    entity_id: binary_sensor.natachas_bayesian_presence
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.tosh_sleep
    state: 'off'
  action:
  - service: notify.mobile_app_toshs_pixel_6_pro
    data:
      message: 'Welcome 🏠 do you need help❓'
      title: 'Shokouhi Zoo'
      data:
        actions:
        - action: 'KEY_ONE'
          title: 'Send Help'
        ttl: 0
        priority: 'high'
        group: location
        channel: location
        tag: location
        timeout: 600
        importance: high
        notification_icon: "mdi:home-map-marker"
  - wait_template: "{{ is_state('binary_sensor.front_door', 'on') }}"
  - service: notify.android
    data:
      message: clear_notification
      data:
        ttl: 0
        priority: high
        tag: location

- alias: Notify bayesian off tosh
  trigger:
    platform: state
    entity_id: binary_sensor.natachas_bayesian_presence
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.tosh_sleep
    state: 'off'
  action:
  - service: notify.mobile_app_toshs_pixel_6_pro
    data:
      message: TTS
      data:
        ttl: 0
        priority: high
        tts_text: "Tosh has left the zoo. Did you forget anything?"

- alias: Tosh awake and left
  trigger:
  - platform: state
    entity_id: device_tracker.toshs_pixel_6_pro
    to: 'not_home'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.tosh_sleep
      state: 'on'
    - condition: state
      entity_id: sun.sun
      state: 'above_horizon'
  action:
  - service: notify.mobile_app_toshs_pixel_6_pro
    data:
      message: command_broadcast_intent
      data:
        intent_package_name: "com.urbandroid.sleep"
        intent_action: "com.urbandroid.sleep.alarmclock.STOP_SLEEP_TRACK"
        ttl: 0
        priority: high
  - service: input_boolean.turn_off
    entity_id: input_boolean.tosh_sleep
  - delay: "00:01:00"
  - condition: state
    entity_id: group.tracked_users
    state: not_home
  - service: alarm_control_panel.alarm_arm_away
    data:
      entity_id: alarm_control_panel.home

################################################
#
#      Thermostat Automations
#
################################################

- alias: Cool down house if thermostat gets above 80 and nobody is home
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_air_temperature
    above: 79
  condition:
    condition: state
    entity_id: group.tracked_users
    state: 'not_home'
  action:
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'cool'
  - delay: "00:00:05"
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 78

- alias: Cool down house if thermostat gets above 80 and someone is home
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_air_temperature
    above: 79
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: binary_sensor.windows
      state: 'off'
  action:
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'cool'
  - delay: "00:00:05"
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 76

- alias: Cool down house if thermostat gets above 80 and someone is home but window is open
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_air_temperature
    above: 79
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
  action:
  - service: notify.android
    data_template:
      message: "Its getting hot ♨, close the following windows so the cooler turns on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      title: Window Open
      data:
        ttl: 0
        priority: high
        channel: Thermostat
        group: thermostat
        notification_icon: "mdi:window-open"
  - service: notify.google_assistant_sdk
    data:
      message: "Its getting hot, close the following windows so the cooler turns on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - wait_template: "{{ is_state('binary_sensor.windows', 'off') }}"
  - condition: template
    value_template: "{{ states('sensor.thermostat_air_temperature') | int >= 79 }}"
  - condition: state
    entity_id: binary_sensor.windows
    state: 'off'
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'cool'
  - delay: "00:00:05"
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 76

- alias: Set thermostat cooling if on and house is armed
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: climate.thermostat
      state: 'cool'
    - condition: template
      value_template: "{{ states.climate.thermostat.attributes.temperature | int < 78 }}"
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 78

- alias: Set thermostat heating if on and house is armed
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: climate.thermostat
      state: 'heat'
    - condition: template
      value_template: "{{ states.climate.thermostat.attributes.temperature | int > 70 }}"
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 70

- alias: Open windows if ac is on and its cooler outside
  trigger:
  - platform: state
    entity_id: climate.thermostat
    to: 'cool'
  - platform: state
    entity_id: sensor.inside_outside_temp
    to: 'True'
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'disarmed'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sensor.inside_outside_temp
      state: 'True'
    - condition: state
      entity_id: climate.thermostat
      state: 'cool'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
  - delay: "00:01:00"
  - wait_template: "{{ state_attr('climate.thermostat', 'temperature') == states('sensor.thermostat_air_temperature') | int }}"
  - condition: state
    entity_id: sensor.inside_outside_temp
    state: 'True'
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: notify.android
    data_template:
      message: "Please open a window and turn off the thermostat 🌡 .  It is {{ states('sensor.thermostat_air_temperature') }} {{ state_attr('sensor.thermostat_air_temperature', 'unit_of_measurement') }} inside compared to {{ state_attr('weather.kvny_daynight', 'temperature') }} {{ state_attr('sensor.thermostat_air_temperature', 'unit_of_measurement') }} outside."
      title: Open Windows
      data:
        ttl: 0
        priority: high
        channel: Thermostat
        group: thermostat
        notification_icon: "mdi:window-open"

- alias: Heat up house if below 63
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_air_temperature
    below: 63
  action:
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'heat'
  - delay: "00:00:05"
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat
      temperature: 67
  - wait_template: "{{ state_attr('climate.thermostat', 'temperature') | int == states('sensor.thermostat_air_temperature') | int }}"
  - delay: "00:01:00"
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.thermostat
      hvac_mode: 'off'

################################################
#
#      Movie Mode Automations
#
################################################

- alias: Movie mode turned on
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  action:
  - service: light.turn_on
    entity_id: light.tv_lights
    data:
      brightness_pct: 100
      kelvin: 6500
  - service: light.turn_off
    entity_id: light.kitchen_lights_level, light.corner_lamp, light.patio, light.living_room_lights_level, light.ollies_lights_level, light.bedroom_lights_level, light.island_lights
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic
  - condition: state
    entity_id: switch.fireplace
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.fireplace

- alias: Movie mode watch pc
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  condition:
    condition: template
    value_template: "{{ states.remote.harmony_hub_den.attributes.current_activity == PowerOff }}"
  action:
    service: switch.turn_on
    entity_id: switch.den_shield
    
- alias: Movie mode curtains if sun is above horizon
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  condition:
    condition: state
    entity_id: sun.sun
    state: above_horizon
  action:
  - service: cover.close_cover
    entity_id: cover.den_curtains

- alias: Turn off lights when movie plays
  trigger:
    platform: state
    entity_id: media_player.kodi_den, media_player.kodi_shield
    to: 'playing'
  condition:
    condition: state
    entity_id: input_boolean.movie_mode
    state: 'on'
  action:
  - service: light.turn_off
    entity_id: light.den_lights_level, light.kitchen_lights_level, light.living_room_lights_level, light.patio, light.corner_lamp, light.island_lights
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic

- alias: Turn on lights when movie paused
  trigger:
  - platform: state
    entity_id: media_player.kodi_den, media_player.kodi_shield
    to: 'paused'
    for:
      seconds: 30
  - platform: state
    entity_id: media_player.kodi_den, media_player.kodi_shield
    to: 'idle'
    for:
      minutes: 1
  condition:
    condition: state
    entity_id: input_boolean.movie_mode
    state: 'on'
  action:
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - service: light.turn_on
    entity_id: light.den_lights_level
    data:
      brightness_pct: 10

- alias: Movie mode turned off and den curtains were closed
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.den_curtains
    state: 'off'
  action:
  - service: cover.open_cover
    entity_id: cover.den_curtains
    
- alias: Movie mode off when harmony hub turns off
  trigger:
    platform: state
    entity_id: remote.harmony_hub_den
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.movie_mode
    state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.movie_mode
    
- alias: Turn off den lights if movie is already playing when movie mode turned on
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: media_player.kodi_den
      state: playing
    - condition: state
      entity_id: media_player.kodi_shield
      state: playing
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ states.remote.harmony_hub_den.attributes.current_activity != "PowerOff" }}'
  action:
    service: light.turn_off
    entity_id: light.den_lights_level
    
################################################
#
#      Water Heater Notification
#
################################################

- alias: Water heater notification
  trigger:
    platform: state
    entity_id: binary_sensor.water_leak_sensor_158d0001bc24f5
    to: 'on'
  condition:
    condition: state
    entity_id: binary_sensor.shokabow_weather_rain
    state: 'off'
  action:
  - service: notify.android
    data_template:
      message: "The water heater is leaking. 🚱 "
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:pipe-leak"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: notify.google_assistant_sdk
    data:
      message: "The water heater is leaking"
        
- alias: Water heater and rain notification
  trigger:
    platform: state
    entity_id: binary_sensor.water_leak_sensor_158d0001bc24f5
    to: 'on'
  condition:
    condition: state
    entity_id: binary_sensor.shokabow_weather_rain
    state: 'on'
  action:
  - service: notify.hass
    data_template:
      message: "There is rain 🌧 getting into the water heater."
      target:
      - !secret discord_house
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: notify.google_assistant_sdk
    data:
      message: "There is rain getting into the water heater"

################################################
#
#      Battery Notification
#
################################################

- alias: Battery Alert
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    - condition: template
      value_template: >
          {%- set threshold = 25 -%}
          {% macro battery_level() %}
          {% set domains = ['light', 'switch', 'sensor', 'lock', 'binary_sensor'] %}
          {% for domain in domains -%}
          {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
          {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
          {{ item.name }}{% endif -%}
          {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
          {{ item.name }}{% endif -%}
          {% endfor %}
          {%- endfor %}
          {% endmacro %}
          {{ battery_level() |trim != "" }}
  action:
    - service: notify.hass
      data_template:
        message: >
             {% macro battery_level() %}
             {%- set threshold = 25 -%}
             {% set domains = ['light', 'switch', 'sensor', 'lock', 'binary_sensor'] %}
             {% for domain in domains -%}
             {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
             {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
             {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
             {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
             {{ item.name }} ({{ item.state }}) 🔋⛔ {% if not loop.last %}, {%- endif %} {% endif -%}
             {% endfor %}
             {%- endfor %}
             {% endmacro %}
             {{ battery_level()}}
        target:
        - !secret discord_house

################################################
#
#      Log Notification
#
################################################

# - alias: Timer out of sync
  # trigger:
    # platform: event
    # event_type: timer_out_of_sync
  # action:
  # - service: notify.hass
    # data_template:
      # message: "Timer out of sync. ⏲ "
      # target:
      # - !secret discord_danny

################################################
#
#      Download Automations
#
################################################

- alias: Speed test
  trigger:
    - platform: time
      at: "01:00:00"
    - platform: time
      at: "05:00:00"
    - platform: time
      at: "13:00:00"
    - platform: time
      at: "17:00:00"
  condition:
    - condition: template
      value_template: "{{ states('sensor.plex')|int == 0 }}"
    - condition: template
      value_template: "{{ states('sensor.sabnzbd_speed')|int == 0 }}"
  action:
    - service: homeassistant.update_entity
      target:
        entity_id: sensor.speedtest_download

- alias: Notify PC offline
  trigger:
    platform: state
    entity_id: switch.tosh_w10, switch.blue_iris, switch.vostros
    to: 'off'
    for:
      minutes: 10
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} offline 💻⛔⚠"
      title: Computer Offline
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:laptop"

################################################
#
#      Numeric automations
#
################################################

- alias: Certificate Expiring
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    condition: numeric_state
    entity_id: sensor.ssl_certificate_expiry
    below: 5
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "Certificate expiring in {{ states.sensor.ssl_certificate_expiry.state }} days! ❌⚠ "
      title: Expiring
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:certificate"

- alias: Disk Getting Full
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    condition: numeric_state
    entity_id: sensor.disk_use_percent_home
    above: 80
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "Home assistant drive getting full, over 80%! Check journal and zoneminder ❌⚠ "
      title: Space Full
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:disc-alert"

################################################
#
#      Shower Automations
#
################################################

- alias: Shower Mode Turned On
  trigger:
    platform: state
    entity_id: input_boolean.shower_mode
    to: 'on'
  action:
  - service: switch.turn_on
    entity_id: switch.house_fan
  - condition: state
    entity_id: media_player.bathroom_home
    state: 'off'
  - service: media_player.play_media
    data:
      entity_id: media_player.bathroom_home
      media_content_id: "https://prod-3-91-231-242.wostreaming.net/audacy-kroqfmaac-hlsc.m3u8/?source=aud-webplayer&z=1232ee8c0304477fb39efdb5cbe564da&p=2"
      media_content_type: "audio/mp4"
      
- alias: Shower Mode Turned Off
  trigger:
    platform: state
    entity_id: input_boolean.shower_mode
    to: 'off'
  action:
  - service: media_player.media_stop
    entity_id: media_player.bathroom_home
  - wait_template: "{{ states('sensor.bathroom_humidity') | int < 60 }}"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: switch.turn_off
    entity_id: switch.house_fan
    
- alias: Shower Mode On and bathroom window still open
  trigger:
    platform: state
    entity_id: input_boolean.shower_mode
    to: 'on'
    for:
      minutes: 2
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.bathroom_window
      state: 'off'
    - condition: state
      entity_id: binary_sensor.bathroom_door
      state: 'off'
  action:
  - service: media_player.media_play_pause
    entity_id: media_player.bathroom_home
  - service: tts.google_say
    entity_id: media_player.bathroom_home
    data:
      message: "Please open the bathroom window"
  - delay: "00:00:06"
  - service: media_player.play_media
    data:
      entity_id: media_player.bathroom_home
      media_content_id: "https://prod-3-91-231-242.wostreaming.net/audacy-kroqfmaac-hlsc.m3u8/?source=aud-webplayer&z=1232ee8c0304477fb39efdb5cbe564da&p=2"
      media_content_type: "audio/mp4"
    
- alias: Shower mode off if bathroom speaker not playing or humidity drops below 60
  trigger:
  - platform: state
    entity_id: media_player.bathroom_home
    to: 'paused'
    for:
      minutes: 30
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  - platform: state
    entity_id: media_player.bathroom_home
    to: 'off'
    for:
      minutes: 5
  - platform: numeric_state
    entity_id: sensor.bathroom_humidity
    below: 60
  condition:
    condition: state
    entity_id: input_boolean.shower_mode
    state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.shower_mode
    
- alias: Shower mode on when humidity above 65
  trigger:
    platform: numeric_state
    entity_id: sensor.bathroom_humidity
    above: 65
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.shower_mode
    
- alias: Play music again if interrupted
  trigger:
  - platform: state
    entity_id: media_player.bathroom_home
    to: 'idle'
    for:
      seconds: 20
  condition:
    condition: state
    entity_id: input_boolean.shower_mode
    state: 'on'
  action:
  - service: media_player.play_media
    data:
      entity_id: media_player.bathroom_home
      media_content_id: "https://19213.live.streamtheworld.com/KROQFMAAC.aac?SRC=CBS&DIST=CBS&TGT=cbslocalplayer&tdsdk=js-2.9&pname=TDSdk&pversion=2.9&banners=none&sbmid=75476a0e-e311-49bb-d6e5-eb6d47354b9e"
      media_content_type: "audio/mp4"
      
################################################
#
#      Motion Light Automations
#
################################################

- alias: Bedroom Motion Light On
  trigger:
  - platform: state
    entity_id: binary_sensor.bedroom_motion_sensor
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_door
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: input_boolean.danny_sleep
      state: 'off'
    - condition: state
      entity_id: input_boolean.tosh_sleep
      state: 'off'
  action:
  - service: light.turn_on
    data_template:
      entity_id: >
          {%- if (now().hour < 22 and now().hour > 15) -%}
            light.bedroom_lights_level
          {%- else -%}
            light.dannys, light.toshs
          {%- endif -%}

- alias: Bedroom Motion Lights Off
  trigger:
    platform: state
    entity_id: binary_sensor.bedroom_motion_sensor
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: binary_sensor.bedroom_door
      state: 'off'
  action:
  - service: light.turn_off
    entity_id: light.bedroom_lights_level, light.dannys, light.toshs
  # - delay: "00:00:05"
  # - service: mqtt.publish
    # data_template:
      # topic: "OpenZWave/1/command/requestnodedynamic/"
      # payload: '{ "node": 2 }'

- alias: Turn off living room lights when no motion
  trigger:
    platform: state
    entity_id: binary_sensor.living_room_camera_motion_detected
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: light.living_room_lights_level
      state: 'on'
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: switch.living_room_tv
      state: 'off'
    - condition: state
      entity_id: input_boolean.cleaning_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_sleeping
      state: 'off'
  action:
  - service: light.turn_off
    entity_id: light.living_room_lights_level
  # - delay: "00:00:05"
  # - service: mqtt.publish
    # data_template:
      # topic: "OpenZWave/1/command/requestnodedynamic/"
      # payload: '{ "node": 4 }'

- alias: Turn off kitchen lights when no motion
  trigger:
    platform: state
    entity_id: binary_sensor.kitchen_motion_detected
    to: 'off'
    for:
      minutes: 4
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: switch.living_room_tv
      state: 'off'
    - condition: state
      entity_id: input_boolean.cleaning_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_sleeping
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: light.kitchen_lights_level
        state: 'on'
      - condition: state
        entity_id: light.island_lights
        state: 'on'
  action:
  - service: light.turn_off
    entity_id: light.kitchen_lights_level, light.island_lights

- alias: Turn off Ollies lights when no motion
  trigger:
    platform: state
    entity_id: binary_sensor.ollies_motion, binary_sensor.ollies_door
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: light.ollies_lights_level
      state: 'on'
    - condition: state
      entity_id: binary_sensor.ollies_closet_door
      state: 'off'
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: binary_sensor.ollies_door
      state: 'off'
    - condition: state
      entity_id: binary_sensor.ollies_motion
      state: 'off'
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'off'
  action:
    service: light.turn_off
    entity_id: light.ollies_lights_level
    
- alias: Turn on Ollies lights when motion
  trigger:
    platform: state
    entity_id: binary_sensor.ollies_motion, binary_sensor.ollies_door
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: light.ollies_lights_level
      state: 'off'
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'off'
  action:
    service: light.turn_on
    entity_id: light.ollies_lights_level

- alias: Hallway light motion at night
  trigger:
    platform: state
    entity_id: binary_sensor.hallway_motion_sensor
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  action:
    service: script.turn_on
    entity_id: script.light_at_night

################################################
#
#      Ring Automations
#
################################################

- alias: Motion at front door
  mode: restart
  trigger:
    platform: state
    entity_id: binary_sensor.front_door_motion, binary_sensor.door_view_motion
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: lock.front_door
      state: locked
      for:
        minutes: 1
  action:
  - service: notify.den
    data:
      data:
        color: teal
        duration: 5
      message: "There is motion at the front door🚪"
      title: Shokabow Zoo

- alias: Ding Dong at front door
  mode: restart
  trigger:
    platform: state
    entity_id: binary_sensor.front_door_ding, binary_sensor.door_view_ding
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: disarmed
  action:
  - service: notify.den
    data:
      data:
       color: teal
       duration: 10
      message: "Someone is at the front door 🚪"
      title: Shokabow Zoo
  - service: notify.google_assistant_sdk
    data:
      message: "Someone is at the front door"

################################################
#
#      Sink Leaking Automations
#
################################################

- alias: Sink is leaking
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_sink_leak_sensor
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bar_sink_leak_sensor
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_sink_leak_sensor
    to: 'on'
  action:
  - service: notify.plex_shokouhi
    data_template:
      message: "Leak detected 🚱 at home {{ trigger.to_state.attributes.friendly_name }} 🏠 "
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'Leak detected 🚱 at home {{ trigger.to_state.attributes.friendly_name }} 🏠 '
      title: Shokabow Zoo
  - service: notify.android
    data_template:
      message: "Leak detected 🚱 at home {{ trigger.to_state.attributes.friendly_name }} 🏠 "
      title: Alert
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:pipe-leak"

################################################
#
#      Switch Automations
#
################################################

- alias: Turn On Hallway Light Bright White
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.hallway_office_switch
      click_type: single
  action:
  - service: light.turn_on
    entity_id: light.hallway_light
    data:
      kelvin: 6500
      brightness_pct: 100
      
- alias: Turn On Hallway Light Color
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.hallway_office_switch
      click_type: long_click_press
  action:
  - service: light.turn_on
    data:
      entity_id: light.hallway_light
      brightness_pct: 40
      color_name: 'green'

- alias: Turn Off Hallway Light From Switch
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.hallway_office_switch
      click_type: double
  action:
  - service: light.turn_off
    entity_id: light.hallway_light

- alias: Toggle patio lights
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.patio_switch
      click_type: single
  action:
    service: light.toggle
    entity_id: light.patio

# - alias: Open or Close Den Curtains
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.click
    # event_data:
      # entity_id: binary_sensor.patio_switch
      # click_type: double
  # action:
    # service_template: >
        # {% if is_state('cover.den_curtains', 'open') %}
          # cover.close_cover
        # {% elif is_state('cover.den_curtains', 'closed') %}
          # cover.open_cover
        # {% else %}
        # {% endif %}
    # entity_id: cover.den_curtains

# - alias: Toggle Backyard Lights
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.click
    # event_data:
      # entity_id: binary_sensor.patio_switch
      # click_type: long_click_press
  # action:
    # service: switch.toggle
    # entity_id: switch.backyard_lights_switch

- alias: Toggle Ollies lamp
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.nursery_switch
      click_type: single
  action:
    service: light.toggle
    entity_id: light.ollies_lamp

################################################
#
#      Car Presence Automations
#
################################################

- alias: Danny car
  trigger:
  - platform: state
    entity_id: binary_sensor.tsxpresence
    to: 'on'
  - platform: state
    entity_id: binary_sensor.tsxpresence
    to: 'off'
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: "{{ (is_state('binary_sensor.tsxpresence', 'off') and is_state('device_tracker.tsx', 'home')) or (is_state('binary_sensor.tsxpresence', 'on') and is_state('device_tracker.tsx', 'not_home')) }}"
    - condition: or
      conditions:
      - condition: state
        entity_id: device_tracker.tsx
        state: 'home'
        for:
          minutes: 1
      - condition: state
        entity_id: device_tracker.tsx
        state: 'not_home'
        for:
          minutes: 1
  action:
  - service: notify.hass
    data_template:
      message: >
           {% if is_state("binary_sensor.tsxpresence", "on") %}
             TSX arrived home 🚗
           {% elif is_state("binary_sensor.tsxpresence", "off") %}
             TSX left home 🚗 
           {% else %}
           {% endif %}
      target:
      - !secret discord_danny

- alias: Tosh car
  trigger:
  - platform: state
    entity_id: binary_sensor.rdxpresence
    to: 'on'
  - platform: state
    entity_id: binary_sensor.rdxpresence
    to: 'off'
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: "{{ (is_state('binary_sensor.rdxpresence', 'off') and is_state('device_tracker.rdx', 'home')) or (is_state('binary_sensor.rdxpresence', 'on') and is_state('device_tracker.rdx', 'not_home')) }}"
    - condition: or
      conditions:
      - condition: state
        entity_id: device_tracker.rdx
        state: 'home'
        for:
          minutes: 1
      - condition: state
        entity_id: device_tracker.rdx
        state: 'not_home'
        for:
          minutes: 1
  action:
  - service: notify.hass
    data_template:
      message: >
           {% if is_state("binary_sensor.rdxpresence", "on") %}
             RDX arrived home 🚙
           {% elif is_state("binary_sensor.rdxpresence", "off") %}
             RDX left home 🚙
           {% else %}
           {% endif %}
      target:
      - !secret discord_danny

################################################
#
#      BBQ Automations
#
################################################
 
- alias: BBQ Notifications
  trigger:
    platform: state
    entity_id: input_select.bbq_probe1
    from: "Select Input"
  condition:
    condition: state
    entity_id: binary_sensor.bbq_probe
    state: 'on'
  action:
  - wait_template: >
     {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
       {{ states.sensor.bbq_temperature.state|int >= 195 }}
     {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
       {{ states.sensor.bbq_temperature.state|int >= 195 }}
     {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
       {{ states.sensor.bbq_temperature.state|int >= 150 }}
     {% elif is_state("input_select.bbq_probe1", "Fish") -%}
       {{ states.sensor.bbq_temperature.state|int >= 130 }}
     {% elif is_state("input_select.bbq_probe1", "Steak") -%}
       {{ states.sensor.bbq_temperature.state|int >= 120 }}
     {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
       {{ states.sensor.bbq_temperature.state|int >= 145 }}
     {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
       {{ states.sensor.bbq_temperature.state|int >= 120 }}
     {%- else -%}
     {%- endif %}
  - service: notify.android
    data_template:
      message: >-
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are almost done  🐮🤤
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is almost done 🐮🤤 
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is almost done 🐤🤤
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is almost done 🐟🤤
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is almost done 🐮🤤 
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is almost done 🦃🤤
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tri-tip is almost done 🐮🤤 
          {%- else -%}
          {%- endif %}
      title: BBQ
      data:
        ttl: 0
        priority: high
        channel: BBQ
        group: bbq
        notification_icon: "mdi:grill"
  - service: notify.google_assistant_sdk
    data:
      message: >-
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are almost done
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is almost done
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is almost done
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is almost done
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is almost done
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is almost done
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tri-tip is almost done
          {%- else -%}
            Food is almost done
          {%- endif %}
  - wait_template: >
     {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
       {{ states.sensor.bbq_temperature.state|int >= 205 }}
     {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
       {{ states.sensor.bbq_temperature.state|int >= 205 }}
     {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
       {{ states.sensor.bbq_temperature.state|int >= 165 }}
     {% elif is_state("input_select.bbq_probe1", "Fish") -%}
       {{ states.sensor.bbq_temperature.state|int >= 145 }}
     {% elif is_state("input_select.bbq_probe1", "Steak") -%}
       {{ states.sensor.bbq_temperature.state|int >= 130 }}
     {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
       {{ states.sensor.bbq_temperature.state|int >= 160 }}
     {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
       {{ states.sensor.bbq_temperature.state|int >= 130 }}
     {%- else -%}
     {%- endif %}
  - service: notify.android
    data_template:
      message: >
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are done 🐮 🍽 🍖
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is done 🍽 🐄
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is done 🐔🍗🍽
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is done 🐟 🍽 🍤
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is done 🐮 🍴 🍖 🥩
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is done 🦃 🍴
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tri-tip is done 🐮 🍽
          {%- else -%}
          {%- endif %}
      title: BBQ
      data:
        ttl: 0
        priority: high
        channel: BBQ
        group: bbq
        notification_icon: "mdi:grill"
  - service: notify.google_assistant_sdk
    data:
      message: >-
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are done
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is done
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is done
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is done
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is done
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is done
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tri-tip is done
          {%- else -%}
            Food is done
          {%- endif %}
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 30
        position: center
      message: >
       {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are done 🐮 🍽 🍖
       {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is done 🍽 🐄
       {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is done 🐔🍗🍽
       {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is done 🐟 🍽 🍤
       {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is done 🐮 🍴 🍖 🥩
       {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is done 🦃 🍴
       {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tri-tip is done 🐮 🍽
       {%- else -%}
       {%- endif %}
      title: Shokabow Zoo
  - service: input_select.select_option
    entity_id: input_select.bbq_probe1
    data:
      option: "Select Input"
      
- alias: BBQ notifications not on
  trigger:
  - platform: state
    entity_id: input_select.bbq_probe1
    from: "Select Input"
  condition:
    condition: state
    entity_id: binary_sensor.bbq_probe
    state: 'off'
  action:
  - delay: "00:00:20"
  - service: input_select.select_option
    entity_id: input_select.bbq_probe1
    data:
      option: "Select Input"

- alias: Set BBQ override
  trigger:
    platform: state
    entity_id: input_select.bbq_probe1
  condition:
    condition: state
    entity_id: binary_sensor.bbq_probe
    state: 'on'
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.bbq1_override
      value: >
       {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         205
       {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         205
       {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         165
       {% elif is_state("input_select.bbq_probe1", "Fish") -%}
         145
       {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
         160
       {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         130
       {% elif is_state("input_select.bbq_probe1", "Select Input") -%}
         130
       {%- else -%}
         130
       {%- endif %}

################################################
#
#      Pool Automations
#
################################################

- alias: Notify pool pump offline
  trigger:
    platform: numeric_state
    entity_id: sensor.pool_pump_power
    below: 3
    for:
      minutes: 10
  condition:
    condition: state
    entity_id: sensor.season
    state: summer
  action:
  - service: notify.android
    data_template:
      message: "Pool pump 🏊‍♀️ is offline, go outside and hit reset ⚠ "
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        notification_icon: "mdi:pool"

- alias: Save pool temperature
  trigger:
    platform: state
    entity_id: sensor.pool_temperature
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: "{{ (states('sensor.pool_temperature') | int < 150) and (trigger.to_state.state != states('input_number.pool_temp'))}}"
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.pool_temperature
        state: unavailable
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.pool_temp
      value: "{{ trigger.to_state.state }}"

################################################
#
#      Vacation Lights Automations
#
################################################

- alias: Vacation lighting
  trigger:
  - platform: sun
    event: sunset
    offset: "00:30:00"
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
    for:
      minutes: 20
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'on'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_away'
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
  action:
  - delay: '00:{{ range(10,59) | random | int }}:{{ range(20,59) | random | int }}'
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - delay: '0{{ range(0,3) | random | int }}:{{ range(20,59) | random | int }}:00'
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: light.turn_off
    entity_id: light.kitchen_lights_level
  - delay: '00:{{ range(10,59) | random | int }}:{{ range(20,59) | random | int }}'
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: light.turn_on
    entity_id: light.bedroom_lights_level
  - delay: '0{{ range(0,1) | random | int }}:{{ range(20,59) | random | int }}:00'
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: light.turn_off
    entity_id: light.bedroom_lights_level
  # - service: script.turn_on
    # entity_id: script.update_lights_dynamic

################################################
#
#      Fan Automations
#
################################################

- alias: Turn on den fan when its too hot
  trigger:
  - platform: numeric_state
    entity_id: sensor.den_air_purifier_temp
    above: 76
  condition:
    condition: state
    entity_id: switch.den_fan
    state: 'off'
  action:
    service: switch.turn_on
    entity_id: switch.den_fan
    
- alias: Turn off den fan when it cools down
  trigger:
  - platform: numeric_state
    entity_id: sensor.den_air_purifier_temp
    below: 74
  condition:
    condition: state
    entity_id: switch.den_fan
    state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.den_fan
 
- alias: Living room fan
  trigger:
  - platform: numeric_state
    entity_id: sensor.living_room_air_purifier_temp
    above: 76
  - platform: numeric_state
    entity_id: sensor.living_room_air_purifier_temp
    below: 74
  action:
    service_template: >
        {% if states('sensor.living_room_air_purifier_temp')|float > 76 %}
          switch.turn_on
        {% elif states('sensor.living_room_air_purifier_temp')|float < 74 %}
          switch.turn_off
        {% endif %}
    entity_id: switch.living_room_fan

################################################
#
#      Air Purifier Automations
#
################################################

- alias: Clean Air Purifier Filter
  trigger:
    - platform: numeric_state
      entity_id: sensor.den_air_purifier_filter_life_remaining, sensor.living_room_air_purifier_filter_life_remaining, sensor.bedroom_air_purifier_filter_life_remaining, sensor.ollies_air_purifier_filter_life_remaining
      below: 3
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} is below 3, time to clean the air purifier filter"
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        tag: "{{ trigger.entity_id }}"
        alert_once: true
        notification_icon: "mdi:air-filter"
 
################################################
#
#      Next Rocket Launch Automations
#
################################################

- alias: Rocket Launch
  trigger:
    platform: time_pattern
    minutes: '5'
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: >-
          {% if ((as_timestamp(now()) > (as_timestamp(states.sensor.launch_time.state) | int - 3600 ) ) ) and ((as_timestamp(states.sensor.launch_time.state) > (as_timestamp(now()) )))%}
            true
          {% else %}
            false
          {% endif %}
    - condition: template
      value_template: "{{ state_attr('sensor.next_launch', 'stream') != None }}"
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "Rocket launch 🚀 within the hour! {{ states.sensor.next_launch.state }} by {{ states.sensor.next_launch.attributes.provider }} at {{ ( as_timestamp( strptime(states.sensor.launch_time.state, '%B %d, %Y %H:%M:%S %Z') ) ) | timestamp_custom('%h %d, %Y %I:%M %p')}}.  Streaming link: {{ states.sensor.next_launch.attributes.stream }} 🎥 "
      title: Space Launch
      data:
        ttl: 0
        priority: high
        channel: Rocket
        group: rocket
        notification_icon: "mdi:rocket-launch"

################################################
#
#      Image Processing Automations
#
################################################

# - alias: Image processing on motion detection frontyard
  # mode: parallel
  # trigger:
    # platform: state
    # entity_id: binary_sensor.frontyard_driveway_motion, binary_sensor.frontyard_side_gate_motion, binary_sensor.frontyard_cars_motion
  # condition:
    # condition: state
    # entity_id: input_boolean.gardener
    # state: 'off'
  # action:
  # - service: image_processing.scan
    # data_template:
      # entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].replace('_motion', '') }}"

# - alias: Notify image processing
  # mode: parallel
  # trigger:
    # platform: state
    # entity_id: image_processing.tensorflow_frontyard_driveway, image_processing.tensorflow_frontyard_side_gate, image_processing.tensorflow_den_camera, image_processing.tensorflow_living_room_camera, image_processing.tensorflow_baby_monitor, image_processing.tensorflow_outdoor_camera, image_processing.tensorflow_patio, image_processing.tensorflow_garage_side_gate, image_processing.tensorflow_frontyard_cars, image_processing.tensorflow_kitchen, image_processing.tensorflow_den_backyard
  # condition:
    # condition: template
    # value_template: '{{ trigger.to_state.state |int > 0 }}'
  # action:
  # - service: notify.hass
    # data_template:
      # message: >
            # {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].replace('_', ' ').replace('tensorflow ', '') }} 📸.
      # target:
      # - !secret discord_images
      # data:
        # images:
        # - "/home/homeassistant/.homeassistant/snapshot/{{ trigger.entity_id.split('.')[1].replace('tensorflow_', '') }}_latest.jpg"
  # - condition: template
    # value_template: "{{ (trigger.entity_id == 'image_processing.tensorflow_frontyard_driveway') or (trigger.entity_id == 'image_processing.tensorflow_frontyard_side_gate') or (trigger.entity_id == 'image_processing.tensorflow_frontyard_cars') }}"
  # - service: notify.den
    # data_template:
      # data:
        # color: red
        # duration: 3
        # position: bottom-right
        # image:
          # path: "/home/homeassistant/.homeassistant/snapshot/{{ trigger.entity_id.split('.')[1].replace('tensorflow_', '') }}_latest.jpg"
      # message: >
            # {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].replace('_', ' ').replace('tensorflow ', '') }} 📸.
      # title: Shokabow Zoo

# - alias: Image Processing When Away
  # mode: parallel
  # trigger:
    # platform: state
    # entity_id: binary_sensor.patio_motion, binary_sensor.kitchen_side_gate_motion, binary_sensor.garage_side_gate_motion, binary_sensor.den_backyard_motion
  # condition:
  # - condition: state
    # entity_id: alarm_control_panel.home
    # state: armed_away
  # action:
  # - service: image_processing.scan
    # data_template:
      # entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].replace('_motion', '') }}"

- alias: Turn on kitchen lights when someone is home and awake in the kitchen
  mode: queued
  trigger:
    platform: numeric_state
    entity_id: sensor.frigate_kitchen_camera_person
    above: 0
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: light.kitchen_lights_level
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: light.island_lights
      state: 'off'
    - condition: state
      entity_id: input_boolean.movie_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_sleeping
      state: 'off'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
  action:
  - service: light.turn_on
    data:
      entity_id: light.kitchen_lights_level

- alias: Turn on living room lights someone is home and awake
  mode: queued
  trigger:
    platform: numeric_state
    entity_id: sensor.frigate_living_room_camera_person
    above: 0
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: light.living_room_lights_level
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.movie_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_sleeping
      state: 'off'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
  action:
  - service: light.turn_on
    data:
      entity_id: light.living_room_lights_level

# - alias: Turn on lights when person detected
  # mode: parallel
  # trigger:
    # platform: state
    # entity_id: image_processing.tensorflow_kitchen, image_processing.tensorflow_living_room_camera
  # condition:
    # condition: template
    # value_template: '{{ trigger.to_state.state |int > 0 }}'
  # action:
  # - service: light.turn_on
    # data_template:
      # entity_id: >
             # {% if trigger.entity_id == 'image_processing.tensorflow_kitchen' %}
               # light.kitchen_lights_level
             # {% elif trigger.entity_id == 'image_processing.tensorflow_living_room_camera' %}
               # light.living_room_lights_level
             # {% else %}
             # {% endif %}
  # - condition: template
    # value_template: "{{ trigger.entity_id == 'image_processing.tensorflow_living_room_camera' }}"
  # - delay: "00:00:05"
  # - service: mqtt.publish
    # data_template:
      # topic: "OpenZWave/1/command/requestnodedynamic/"
      # payload: '{ "node": 4 }'

- alias: Notify kitchen tv on for 1 hour
  trigger:
    platform: state
    entity_id: switch.kitchen_tv
    to: 'on'
    for:
      hours: 1
  action:
  - service: notify.android
    data:
      message: 'Do you still want the Kitchen TV on?'
      data:
        ttl: 0
        priority: high
        sticky: true
        persistent: true
        channel: "Left On"
        group: kitchen_tv
        tag: kitchen_tv
        notification_icon: "mdi:television-ambient-light"
        actions:
        - action: 'TV_YES'
          title: 'Yes'
        - action: 'KITCHEN_TV_NO'
          title: 'No'

- alias: Turn off kitchen TV from action
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'KITCHEN_TV_NO'
  action:
  - service: notify.android
    data:
      message: clear_notification
      data:
        ttl: 0
        priority: high
        tag: kitchen_tv
  - condition: state
    entity_id: switch.kitchen_tv
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.kitchen_tv

- alias: Notify living room tv on for 1 hour
  trigger:
    platform: state
    entity_id: switch.living_room_tv
    to: 'on'
    for:
      hours: 1
  action:
  - service: notify.android
    data:
      message: 'Do you still want the Living Room TV on?'
      data:
        ttl: 0
        priority: high
        sticky: true
        persistent: true
        channel: "Left On"
        group: living_room_tv
        tag: living_room_tv
        notification_icon: "mdi:television-ambient-light"
        actions:
        - action: 'TV_YES'
          title: 'Yes'
        - action: 'LIVING_ROOM_TV_NO'
          title: 'No'

- alias: Turn off living room TV from action
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'LIVING_ROOM_TV_NO'
  action:
  - service: notify.android
    data:
      message: clear_notification
      data:
        ttl: 0
        priority: high
        tag: living_room_tv
  - condition: state
    entity_id: switch.living_room_tv
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.living_room_tv

- alias: Notify gardener is on for 2 hours
  trigger:
    platform: state
    entity_id: input_boolean.gardener
    to: 'on'
    for:
      hours: 2
  action:
  - service: notify.android
    data:
      message: 'Is the gardener still there?'
      data:
        ttl: 0
        priority: high
        persistent: true
        sticky: true
        channel: "Left On"
        group: gardener
        tag: gardener
        notification_icon: "mdi:grass"
        actions:
        - action: 'GARDENER_YES'
          title: 'Yes'
        - action: 'GARDENER_NO'
          title: 'No'

- alias: Turn off gardener from action
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'GARDENER_NO'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.gardener
  - service: notify.android
    data:
      message: clear_notification
      data:
        ttl: 0
        priority: high
        tag: gardener

################################################
#
#      Webhook Automations
#
################################################

- alias: Vacuum Hallway
  trigger:
    platform: webhook
    webhook_id: !secret neato_hallway
    local_only: false
  action:
  - service: neato.custom_cleaning
    data:
      entity_id: vacuum.mrs_neato
      zone: Hallway

- alias: Vacuum Kitchen
  trigger:
    platform: webhook
    webhook_id: !secret neato_kitchen
    local_only: false
  action:
  - service: neato.custom_cleaning
    data:
      entity_id: vacuum.mrs_neato
      zone: Kitchen

- alias: Vacuum deep clean Kitchen
  trigger:
    platform: webhook
    webhook_id: !secret neato_deep_kitchen
    local_only: false
  action:
  - service: script.turn_on
    entity_id: script.kitchen_deep_cleaning

- alias: Vacuum Living Room
  trigger:
    platform: webhook
    webhook_id: !secret neato_living_room
    local_only: false
  action:
  - service: neato.custom_cleaning
    data:
      entity_id: vacuum.mrs_neato
      zone: Living room

- alias: Good night via google home
  trigger:
    platform: webhook
    webhook_id: !secret goodnight
    local_only: false
  action:
  - service: scene.turn_on
    entity_id: scene.goodnight
  - condition: state
    entity_id: input_boolean.baby_sleeping
    state: 'on'
  - service: mqtt.publish
    data_template:
      topic: "bedroomtablet/babysleep"
      payload: "on"

- alias: Danny tasker awake webhook
  trigger:
    platform: webhook
    webhook_id: !secret danny_awake_webhook
    local_only: false
  action:
  - service: switch.turn_off
    entity_id: switch.tasker_sleep_danny

- alias: Tosh tasker awake webhook
  trigger:
    platform: webhook
    webhook_id: !secret tosh_awake_webhook
    local_only: false
  action:
  - service: switch.turn_off
    entity_id: switch.tasker_sleep_tosh

- alias: Sleep as android danny webhook
  trigger:
    platform: webhook
    webhook_id: !secret sleep_as_android_danny_webhook
    local_only: false
  action:
  - service: input_text.set_value
    data:
      entity_id: input_text.sleep_as_android_danny
      value: "{{ trigger.json.event }}"
  - condition: template
    value_template: "{{ is_state('input_text.sleep_as_android_danny', 'sleep_tracking_stopped') or is_state('input_text.sleep_as_android_danny', 'sleep_tracking_started') }}"
  - service: "{% if is_state('input_text.sleep_as_android_danny', 'sleep_tracking_stopped') %}input_boolean.turn_off{% elif is_state('input_text.sleep_as_android_danny', 'sleep_tracking_started') %}input_boolean.turn_on{% else %}{% endif %}"
    entity_id: input_boolean.danny_sleep

- alias: Sleep as android tosh webhook
  trigger:
    platform: webhook
    webhook_id: !secret sleep_as_android_tosh_webhook
    local_only: false
  action:
  - service: input_text.set_value
    data:
      entity_id: input_text.sleep_as_android_tosh
      value: "{{ trigger.json.event }}"
  - condition: template
    value_template: "{{ is_state('input_text.sleep_as_android_tosh', 'sleep_tracking_stopped') or is_state('input_text.sleep_as_android_tosh', 'sleep_tracking_started') }}"
  - service: "{% if is_state('input_text.sleep_as_android_tosh', 'sleep_tracking_stopped') %}input_boolean.turn_off{% elif is_state('input_text.sleep_as_android_tosh', 'sleep_tracking_started') %}input_boolean.turn_on{% else %}{% endif %}"
    entity_id: input_boolean.tosh_sleep

- alias: Save last room danny phone
  trigger:
    platform: state
    entity_id: sensor.dannys_pixel_7_pro_beacon_room
    to:
     - Den
     - Kitchen
     - Bedroom
  action:
  - service: input_text.set_value
    data:
      entity_id: input_text.dannys_phone_last_room
      value: "{{ trigger.to_state.state }}"

- alias: Save last room tosh phone
  trigger:
    platform: state
    entity_id: sensor.toshs_pixel_6_pro_beacon_room
    to:
     - Den
     - Kitchen
     - Bedroom
  action:
  - service: input_text.set_value
    data:
      entity_id: input_text.toshs_phone_last_room
      value: "{{ trigger.to_state.state }}"
################################################
#
#      ADB Automations
#
################################################

- alias: ADB reconnect
  trigger:
    platform: state
    entity_id: media_player.den_shield_tv, media_player.bedroom_shield_tv, media_player.kitchen_fire_stick, media_player.ollies_fire_stick, media_player.living_room_google_tv
    to: 'unavailable'
    for:
      minutes: 1
  action:
    - service: shell_command.adb_connect
      data_template:
        ip_adb: >-
            {% if trigger.entity_id == 'media_player.den_shield_tv' %}
              192.168.1.72
            {% elif trigger.entity_id == 'media_player.bedroom_shield_tv' %}
              192.168.1.92
            {% elif trigger.entity_id == 'media_player.kitchen_fire_stick' %}
              192.168.1.182
            {% elif trigger.entity_id == 'media_player.ollies_fire_stick' %}
              192.168.1.18
            {% elif trigger.entity_id == 'media_player.living_room_google_tv' %}
              192.168.1.214
            {% else %}
            {% endif %}

################################################
#
#      Cat Litter Automations
#
################################################

- alias: Increase Cat Motion Counter
  trigger:
    platform: state
    entity_id: binary_sensor.cat_litter_home_security_motion_detected
    to: 'on'
  action:
    service: counter.increment
    entity_id: counter.cat_litter_motion

- alias: Reset Cat Motion Counter
  trigger:
    platform: state
    entity_id: input_boolean.cat_litter_cleaned
    to: 'on'
  action:
  - service: counter.reset
    entity_id: counter.cat_litter_motion

- alias: Cat Litter Cleaned When Opened
  trigger:
    platform: numeric_state
    entity_id: sensor.cat_litter_illuminance
    above: 50
  action:
  - service: notify.android
    data:
      message: clear_notification
      data:
        ttl: 0
        priority: high
        tag: cat-litter
  - service: input_boolean.turn_off
    entity_id: input_boolean.cat_litter_notifying
  - service_template: >-
            {% if is_state('input_boolean.cat_litter_cleaned', 'off') %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
    entity_id: input_boolean.cat_litter_cleaned
  - condition: state
    entity_id: input_boolean.cat_litter_cleaned
    state: 'off'
  - service: input_boolean.turn_on
    entity_id: input_boolean.cat_litter_cleaned

- alias: Clean the cat litter
  trigger:
  - platform: numeric_state
    entity_id: counter.cat_litter_motion
    above: 99
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.cat_litter_cleaned
      state: 'on'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
  action:
  - wait_template: "{{ is_state('alarm_control_panel.home', 'disarmed') }}"
  - service: input_boolean.turn_off
    entity_id: input_boolean.cat_litter_cleaned
  - service: notify.android
    data:
      message: "There have been {{ states('counter.cat_litter_motion') }} trips to the cat 😼🚽💩🧹 box, time to clean."
      data:
        ttl: 0
        priority: high
        channel: "Cat Litter"
        tag: cat-litter
        group: cat-litter
        persistent: true
        sticky: true
        alert_once: true
        notification_icon: "mdi:cat"
        actions:
        - action: 'REMIND_LATER'
          title: Remind Later
  - service: input_boolean.turn_on
    entity_id: input_boolean.cat_litter_notifying

- alias: Update cat litter notification based on alarm
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: disarmed
  - platform: time_pattern
    minutes: 20
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.cat_litter_notifying
      state: 'on'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: sun.sun
      state: 'above_horizon'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
  action:
  - service: notify.android
    data:
      message: "There have been {{ states('counter.cat_litter_motion') }} trips to the cat 😼🚽💩🧹 box, time to clean."
      data:
        ttl: 0
        priority: high
        channel: "Cat Litter"
        tag: cat-litter
        group: cat-litter
        persistent: true
        sticky: true
        alert_once: true
        notification_icon: "mdi:cat"
        actions:
        - action: 'REMIND_LATER'
          title: 'Remind Later'

- alias: Cat Litter Remind Later
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'REMIND_LATER'
  action:
  - service: notify.android
    data:
      message: clear_notification
      data:
        tag: cat-litter
        ttl: 0
        priority: high

################################################
#
#      Cube Automations
#
################################################

# - alias: Mute den on double tap
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.cube_action
    # event_data:
      # entity_id: binary_sensor.cube
      # action_type: tap_twice
  # condition:
    # condition: and
    # conditions:
    # - condition: state
      # entity_id: remote.harmony_hub_den
      # state: 'on'
    # - condition: state
      # entity_id: alarm_control_panel.home
      # state: 'disarmed'
  # action:
    # service: remote.send_command
    # data:
      # entity_id: remote.harmony_hub_den
      # device: 55196241
      # command: 'Mute'

# - alias: Toggle patio lights on flip 90
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.cube_action
    # event_data:
      # entity_id: binary_sensor.cube
      # action_type: flip90
  # condition:
    # condition: and
    # conditions:
    # - condition: state
      # entity_id: sun.sun
      # state: below_horizon
    # - condition: state
      # entity_id: alarm_control_panel.home
      # state: 'disarmed'
  # action:
    # service: light.toggle
    # entity_id: light.patio

# - alias: Notify rotate cube degrees
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.cube_action
    # event_data:
      # entity_id: binary_sensor.cube
      # action_type: rotate
  # action:
  # - service: notify.hass
    # data_template:
      # message: "Cube rotated {{ trigger.event.data.action_value }} degrees."
      # target:
      # - !secret discord_danny

# - alias: Pause or Play on flip 180
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.cube_action
    # event_data:
      # entity_id: binary_sensor.cube
      # action_type: flip180
  # condition:
    # condition: or
    # conditions:
    # - condition: state
      # entity_id: media_player.den_shield_tv
      # state: 'playing'
    # - condition: state
      # entity_id: media_player.den_shield_tv
      # state: 'paused'
  # action:
  # - service: media_player.media_play_pause
    # entity_id: media_player.den_shield_tv
  # - condition: state
    # entity_id: sensor.den_shield_app
    # state: 'Vaders'
  # - condition: state
    # entity_id: media_player.den_shield_tv
    # state: 'playing'
  # - service: media_player.media_play_pause
    # entity_id: media_player.den_shield_tv

# - alias: Toggle den fan on shake
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.cube_action
    # event_data:
      # entity_id: binary_sensor.cube
      # action_type: shake_air
  # condition:
    # condition: state
    # entity_id: alarm_control_panel.home
    # state: 'disarmed'
  # action:
    # service: switch.toggle
    # entity_id: switch.den_fan

# - alias: Notify vibration movement
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.movement
    # event_data:
      # entity_id: binary_sensor.vibration_sensor
      # movement_type: vibrate
  # action:
  # - service: notify.hass
    # data_template:
      # message: "Vibration detected."
      # target:
      # - !secret discord_danny

# - alias: Notify vibration movement tilt
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.movement
    # event_data:
      # entity_id: binary_sensor.vibration_sensor
      # movement_type: tilt
  # action:
  # - service: notify.hass
    # data_template:
      # message: "Vibration tilt detected."
      # target:
      # - !secret discord_danny

# - alias: Notify vibration movement free fall
  # trigger:
    # platform: event
    # event_type: xiaomi_aqara.movement
    # event_data:
      # entity_id: binary_sensor.vibration_sensor
      # movement_type: free_fall
  # action:
  # - service: notify.hass
    # data_template:
      # message: "Vibration free fall detected."
      # target:
      # - !secret discord_danny

################################################
#
#      Sous Vide Automations
#
################################################

- alias: Notify when Sous Vide is ready
  trigger:
    platform: state
    entity_id: sensor.anova_precision_cooker_state
    to: 'Preheating'
  action:
  - wait_template: "{{ is_state('sensor.anova_precision_cooker_state', 'Cooking') }}"
  - service: notify.android
    data_template:
      message: "Sous vide is ready at {{ states('sensor.anova_precision_cooker_target_temperature') }} 🍳🧑‍🍳 "
      title: Food
      data:
        ttl: 0
        priority: high
        channel: BBQ
        group: bbq
        notification_icon: "mdi:chef-hat"
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "Sous vide is ready at {{ states('sensor.anova_precision_cooker_target_temperature') }} 🍳🧑‍🍳"
      title: Shokabow Zoo
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: notify.google_assistant_sdk
    data:
      message: "Sous vide is ready at {{ states('sensor.anova_precision_cooker_target_temperature') }}"

################################################
#
#      Baby Automations
#
################################################

- alias: Ollies speaker and lights when baby sleeping
  trigger:
    platform: state
    entity_id: input_boolean.baby_sleeping
  action:
  - service_template: >-
      {% if trigger.to_state.state == 'on' %}
        light.turn_off
      {% elif trigger.to_state.state == 'off' %}
        light.turn_on
      {% else %}
      {% endif %}
    entity_id: light.ollies_lights_level, light.hallway_light
  - service_template: >-
      {% if trigger.to_state.state == 'on' %}
        switch.turn_off
      {% elif trigger.to_state.state == 'off' %}
        switch.turn_on
      {% else %}
      {% endif %}
    entity_id: switch.nursery_power_strip_port_6
  - service_template: >-
      {% if trigger.to_state.state == 'on' %}
        light.turn_on
      {% elif trigger.to_state.state == 'off' %}
        light.turn_off
      {% else %}
      {% endif %}
    entity_id: light.ollies_lamp
  - service_template: >-
      {% if trigger.to_state.state == 'off' %}
        switch.turn_off
      {% elif trigger.to_state.state == 'on' %}
        switch.turn_on
      {% else %}
      {% endif %}
    entity_id: switch.ollies_sound_machine_plug
  - service: media_player.volume_set
    data_template:
      entity_id: media_player.living_room_home, media_player.bathroom_home, media_player.kitchen_display, media_player.bedroom_display
      volume_level: >-
        {% if trigger.to_state.state == 'on' %}
          0.4
        {% elif trigger.to_state.state == 'off' %}
          0.6
        {% else %}
        {% endif %}

- alias: Announce ollies lights are on while he is sleeping
  mode: queued
  trigger:
    platform: state
    entity_id: light.ollies_lights_level
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.baby_sleeping
    state: 'on'
  action:
  - service: tts.google_say
    entity_id: media_player.kitchen_display, media_player.den_home_hub, media_player.bedroom_display, media_player.bathroom_home
    data:
      message: "Ollies lights are on"
  - service: notify.android
    data_template:
      message: Ollies lights are on 👶
      title: Baby Awake
      data:
        ttl: 0
        priority: high
        channel: alert
        group: alert
        tag: ollie-lights
        notification_icon: "mdi:lightbulb-on"
  - wait_for_trigger:
    - platform: state
      entity_id: light.ollies_lights_level
      to: 'off'
  - service: notify.android
    data:
      message: clear_notification
      data:
        tag: ollie-lights

- alias: Baby monitor on den shield
  trigger:
    platform: state
    entity_id: input_boolean.baby_sleeping
  action:
  - service: mqtt.publish
    data_template:
      topic: >-
        {% if trigger.to_state.state == 'on' %}
          denshield/babysleepon
        {% elif trigger.to_state.state == 'off' %}
          denshield/babysleepoff
        {% else %}
        {% endif %}
      payload: >-
        {% if trigger.to_state.state == 'on' %}
          on
        {% elif trigger.to_state.state == 'off' %}
          off
        {% else %}
        {% endif %}

- alias: Notify temperature during sleep
  trigger:
  - platform: numeric_state
    entity_id: sensor.ollie_avg_temp
    above: 75
  - platform: numeric_state
    entity_id: sensor.ollie_avg_temp
    below: 60
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'on'
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.ollies_air_purifier_temp
        state: 'unavailable'
  action:
  - service: notify.android
    data_template:
      message: "Ollies room temperature is at {{ states('sensor.ollie_avg_temp') }} 🌡 {% if states('sensor.ollie_avg_temp') | int > 75 %} 🔥 {% else %} {% endif %} 👶 check the heater positioning"
      data:
        ttl: 0
        priority: high
        channel: Ollie
        group: ollie
        tag: ollie
        notification_icon: "mdi:thermometer-alert"
        alert_once: true

- alias: Turn on Ollies heater when its cold
  trigger:
  - platform: numeric_state
    entity_id: sensor.ollie_avg_temp
    below: 61
  - platform: state
    entity_id: input_boolean.baby_sleeping
    to: 'on'
  - platform: state
    entity_id: climate.thermostat
    from: 'heat'
    to: 'off'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: switch.ollies_heater
      state: 'off'
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'on'
    - condition: state
      entity_id: climate.thermostat
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.ollie_avg_temp
      below: 61
  action:
    service: switch.turn_on
    entity_id: switch.ollies_heater

- alias: Turn off Ollies heater when its hot
  trigger:
    platform: numeric_state
    entity_id: sensor.ollie_avg_temp
    above: 70
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: switch.ollies_heater
      state: 'on'
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.ollies_heater

- alias: Notify tablet low battery
  trigger:
    platform: numeric_state
    entity_id: sensor.den_fire_hd8_battery_level, sensor.bedroom_tablet_battery_level, sensor.kitchen_tablet_battery_level
    below: 30
  condition:
    condition: template
    value_template: >-
        {% if trigger.entity_id == 'sensor.den_fire_hd8_battery_level' %}
          {{ is_state('binary_sensor.den_fire_hd8_is_charging', 'off') }}
        {% elif trigger.entity_id == 'sensor.bedroom_tablet_battery_level' %}
          {{ is_state('binary_sensor.bedroom_tablet_is_charging', 'off') }}
        {% elif trigger.entity_id == 'sensor.kitchen_tablet_battery_level' %}
          {{ is_state('binary_sensor.kitchen_tablet_is_charging', 'off') }}
        {% else %}
        {% endif %}
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} is at ({{ trigger.to_state.state }}%), plug it in"
      data:
        ttl: 0
        priority: high
        channel: Battery
        group: battery
        notification_icon: "mdi:battery-10"

- alias: Turn off Ollies heater if heat is on or baby sleeping turns off
  trigger:
  - platform: state
    entity_id: climate.thermostat
    to: 'heat'
  - platform: state
    entity_id: input_boolean.baby_sleeping
    to: 'off'
    from: 'on'
  condition:
    condition: state
    entity_id: switch.ollies_heater
    state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.ollies_heater

- alias: Turn off Ollies heater if on for 1 hour
  trigger:
    platform: state
    entity_id: switch.ollies_heater
    to: 'on'
    for:
      hours: 1
  action:
  - wait_template: "{{ states('sensor.ollie_avg_temp') | int > 71 }}"
  - condition: state
    entity_id: switch.ollies_heater
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.ollies_heater

- alias: Turn off Ollies heater when power is too high
  trigger:
    platform: numeric_state
    entity_id: sensor.nursery_heater_power
    above: 1000
  action:
  - service: switch.turn_off
    entity_id: switch.ollies_heater
  - service: notify.android
    data_template:
      message: "Ollies heater has been turned off because power was too high ({{ trigger.to_state.state }} watts), retrying again in 1 minute"
      data:
        ttl: 0
        priority: high
        channel: Ollie
        group: ollie
        notification_icon: "mdi:radiator-off"
  - service: notify.google_assistant_sdk
    data:
      message: "Ollies heater turned off because power was too high, retrying in 1 minute"
  - delay: "00:01:00"
  - service: switch.turn_on
    entity_id: switch.ollies_heater

- alias: Turn off Ollies humidifier when above 45
  trigger:
    platform: numeric_state
    entity_id: sensor.ollies_air_purifier_humidity
    above: 45
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'on'
    - condition: state
      entity_id: switch.ollies_humidifier_switch
      state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.ollies_humidifier_switch

- alias: Turn on Ollies humidifier when below 40
  trigger:
  - platform: numeric_state
    entity_id: sensor.ollies_air_purifier_humidity
    below: 40
  - platform: state
    entity_id: input_boolean.baby_sleeping
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.baby_sleeping
      state: 'on'
    - condition: state
      entity_id: switch.ollies_humidifier_switch
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.ollies_air_purifier_humidity
      below: 40
  action:
    service: switch.turn_on
    entity_id: switch.ollies_humidifier_switch

- alias: Turn off Ollies humidifier when baby sleeping turns off
  trigger:
    platform: state
    entity_id: input_boolean.baby_sleeping
    to: 'off'
  condition:
    condition: state
    entity_id: switch.ollies_humidifier_switch
    state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.ollies_humidifier_switch

- alias: Ollies curtains
  trigger:
  - platform: state
    entity_id: input_boolean.baby_sleeping
  - event: sunset
    platform: sun
  condition:
    condition: template
    value_template: "{{ (is_state('cover.ollies_curtains', 'open')) or (is_state('input_boolean.baby_sleeping', 'off') and is_state('cover.ollies_curtains', 'closed') and is_state('sun.sun', 'above_horizon')) }}"
  action:
  - service: >
        {% if trigger.entity_id == 'input_boolean.baby_sleeping' %}
          {% if trigger.to_state.state == 'on' %}
            {% if is_state('cover.ollies_curtains', 'open') %}
              cover.close_cover
            {% else %}
            {% endif %}
          {% else %}
            {% if is_state('sun.sun', 'above_horizon') %}
              cover.open_cover
            {% else %}
            {% endif %}
          {% endif %}
        {% else %}
          {% if is_state('cover.ollies_curtains', 'open') %}
            cover.close_cover
          {% else %}
          {% endif %}
        {% endif %}
    entity_id: cover.ollies_curtains

################################################
#
#      Weight Sensor Automations
#
################################################

# - alias: Weight Sensor
  # trigger:
    # platform: numeric_state
    # entity_id: sensor.hx711_value
    # above: 2
  # condition:
    # condition: and
    # conditions:
    # - condition: state
      # entity_id: sun.sun
      # state: below_horizon
    # - condition: state
      # entity_id: alarm_control_panel.home
      # state: disarmed
  # action:
  # - service: light.turn_on
    # entity_id: light.bookshelf_left
  # - wait_template: "{{ states('sensor.hx711_value') | int < 2 }}"
  # - service: light.turn_off
    # entity_id: light.bookshelf_left

################################################
#
#      Android Event Automations
#
################################################

- alias: NFC scanned
  trigger:
  - platform: event
    event_type: tag_scanned
    event_data:
      tag_id: 4bdace23-1e7b-4c36-a7ce-caca845c4283
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "NFC tag scanned by {% set person = states.person|selectattr('attributes.user_id', 'eq', trigger.event.context.user_id)|first %}{{ person.attributes.friendly_name }}"
      data:
        ttl: 0
        priority: high
        group: nfc
        channel: NFC
        notification_icon: "mdi:nfc"

- alias: Zone entered
  trigger:
  - platform: event
    event_type: android.zone_entered
  - platform: event
    event_type: android.zone_exited
  action:
  - service: notify.hass
    data_template:
      message: "{% set person = states.person|selectattr('attributes.user_id', 'eq', trigger.event.context.user_id)|first %}{{ person.attributes.friendly_name }} {{ trigger.event }} home zone with accuracy {{ trigger.event.data.accuracy }} "
      target:
      - !secret discord_danny

- alias: Intent received
  trigger:
  - platform: event
    event_type: android.intent_received
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "Intent received by user {% set person = states.person|selectattr('attributes.user_id', 'eq', trigger.event.context.user_id)|first %}{{ person.attributes.friendly_name }} with action {{ trigger.event.data.intent }}"
      data:
        ttl: 0
        priority: high
        group: intents
        channel: Intents
        notification_icon: "mdi:email-receive"

- alias: Nest event received
  trigger:
  - platform: event
    event_type: nest_event
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "Nest event received type of: {{trigger.event.data.type }}"
      data:
        ttl: 0
        priority: high
        group: nest
        channel: Nest
        notification_icon: "mdi:email-receive"

- alias: Save Danny Mi Band Steps
  mode: queued
  trigger:
    platform: event
    event_type: android.intent_received
    event_data:
      intent: com.mc.miband.stepsGot
  action:
    service: input_number.set_value
    data:
      entity_id: input_number.danny_mi_band_steps
      value: "{{ trigger.event.data.value }}"

- alias: Save Danny Mi Band Heart Rate
  mode: queued
  trigger:
    platform: event
    event_type: android.intent_received
    event_data:
      intent: com.mc.miband.heartRateGot
  action:
    service: input_number.set_value
    data:
      entity_id: input_number.danny_mi_band_heart_rate
      value: "{{ trigger.event.data.value }}"

- alias: Save Danny Mi Band Sleep
  mode: queued
  trigger:
  - platform: event
    event_type: android.intent_received
    event_data:
      intent: com.mc.miband.tasker.trigger.fellAsleep
  - platform: event
    event_type: android.intent_received
    event_data:
      intent: com.mc.miband.tasker.trigger.wokeUp
  action:
    service: >-
        {% if trigger.event.data.intent == 'com.mc.miband.tasker.trigger.wokeUp' %}
          input_boolean.turn_off
        {% elif trigger.event.data.intent == 'com.mc.miband.tasker.trigger.fellAsleep' %}
          input_boolean.turn_on
        {% else %}
        {% endif %}
    data:
      entity_id: >-
        {% if trigger.event.context.user_id == '8290db6a0fc449a491470c631e1e5d77' %}
          input_boolean.danny_mi_band_sleep
        {% elif trigger.event.context.user_id == '0a800877081d4593b2a5f8e0ecca7c54' %}
          input_boolean.tosh_mi_band_sleep
        {% else %}
        {% endif %}

- alias: Phone alarm
  trigger:
    platform: time
    at: sensor.dannys_pixel_7_pro_next_alarm
  action:
  - service: notify.mobile_app_dannys_pixel_7_pro
    data_template:
      message: "alarm going off"
      data:
        ttl: 0
        priority: high
        notification_icon: "mdi:alarm-check"

################################################
#
#      Aquarium Automations
#
################################################

- alias: Aquarium Lights Morning
  trigger:
  - platform: time
    at: "08:00:00"
  action:
  - service: light.turn_on
    entity_id: light.aquarium_light, light.aquarium_light_55g
  - service: switch.turn_on
    entity_id: switch.aquarium_20g_light, switch.aquarium_50g_light, switch.shrimp_2_aquarium_plug_2, switch.aquarium_30g_light, switch.beta_light

- alias: Aquarium Lights Night
  trigger:
  - platform: time
    at: "20:00:00"
  action:
  - service: light.turn_off
    entity_id: light.aquarium_light, light.aquarium_light_55g
  - service: switch.turn_off
    entity_id: switch.aquarium_20g_light, switch.aquarium_50g_light, switch.shrimp_2_aquarium_plug_2, switch.aquarium_30g_light, switch.beta_light

- alias: Feed fish
  trigger:
    platform: state
    entity_id: input_number.stepper_control
  action:
  - service: esphome.stepper_control_stepper
    data_template:
      target: "{{ trigger.to_state.state | int }}"

- alias: Aquarium 55G Bubble Light On
  trigger:
  - platform: time
    at: "19:00:00"
  action:
  - service: switch.turn_on
    entity_id: switch.aquarium_55g_bubble_light

- alias: Aquarium 55G Bubble Light Off
  trigger:
  - platform: time
    at: "23:00:00"
  action:
  - service: switch.turn_off
    entity_id: switch.aquarium_55g_bubble_light

- alias: Notify aquarium temperature
  trigger:
  - platform: numeric_state
    entity_id: sensor.aquarium_temperature, sensor.aquarium_20g_temp, sensor.50g_aquarium_temp, sensor.shrimp_aquarium_temp, sensor.aquarium_50g_temperature, sensor.snail_aquarium_temp, sensor.oranda_aquarium_temp, sensor.angelfish_aquarium_temp
    above: 83
  - platform: numeric_state
    entity_id: sensor.aquarium_temperature, sensor.aquarium_20g_temp, sensor.50g_aquarium_temp, sensor.shrimp_aquarium_temp, sensor.aquarium_50g_temperature, sensor.snail_aquarium_temp, sensor.angelfish_aquarium_temp
    below: 68
  - platform: numeric_state
    entity_id: sensor.oranda_aquarium_temp
    below: 60
  action:
  - service: notify.android
    data_template:
      message: "{{ trigger.to_state.name }} is at {{ trigger.to_state.state }} {{ trigger.to_state.attributes.unit_of_measurement }} check the heater or fan"
      data:
        ttl: 0
        priority: high
        group: aquarium
        tag: "{{ trigger.entity_id }}"
        alert_once: true
        channel: Aquarium
        notification_icon: "mdi:fish"
################################################
#
#      3D Printer Automations
#
################################################

- alias: Turn off printer when it finishes and alarm is on
  trigger:
    platform: state
    entity_id: binary_sensor.octoprint_printing
    to: 'off'
    from: 'on'
  condition:
    condition: not
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
  - wait_template: "{{ states('sensor.octoprint_actual_tool0_temp') | int < 120 }}"
  - service: light.turn_off
    entity_id: light.3d_printer

- alias: Notify print is ready to come off the bed
  mode: restart
  trigger:
    platform: state
    entity_id: binary_sensor.octoprint_printing
    to: 'off'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  action:
  - wait_template: "{{ states('sensor.octoprint_actual_bed_temp') | int < 100 }}"
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: Print is ready to come off the bed. Would you like to turn off the printer?
      data:
        ttl: 0
        priority: high
        tag: printer
        channel: Printer
        group: printer
        notification_icon: "mdi:printer-3d"
        actions:
        - action: "PRINTER_OFF"
          title: "Turn off"
        - action: "PRINTER_ON"
          title: "Leave on"
  - wait_template: "{{ is_state('binary_sensor.octoprint_printing', 'on') }}"
    timeout: "02:00:00"
    continue_on_timeout: false
  - service: notify.mobile_app_dannys_pixel_7_pro
    data:
      message: clear_notification
      data:
        tag: printer
        tto: 0
        priority: high

- alias: Turn off printer from notification
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: PRINTER_OFF
  action:
  - service: light.turn_off
    entity_id: light.3d_printer